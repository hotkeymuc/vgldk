#!/usr/bin/python3
"""
NOI2H
Extract addresses of functions from a .noi file and create a .h file with #defines.
Main use is to allow multi-segment bankswitched programs.
2020-07-31 Bernhard "HotKey" Slawik
"""

import sys
import os

def put(t):
	print(str(t))

if __name__ == '__main__':
	#segment_name = 'segment1'
	#filename_in = 'out/%s.noi' % segment_name
	#filename_out = '%s_addr.h' % segment_name
	
	if len(sys.argv) < 3:
		put('Usage: %s [filename.noi] [filename.h]' % __file__)
		put(__doc__)
		sys.exit(1)
	
	filename_in = sys.argv[1]
	filename_out = sys.argv[2]
	segment_name = os.path.splitext(os.path.basename(filename_in))[0]
	
	r = ''
	
	r += '/*\n'
	r += '	Auto-generated by %s\n' % (__file__)
	r += '	Source: %s\n' % filename_in
	r += '*/\n'
	r += '\n'
	
	put('Parsing "%s"...' % filename_in)
	with open(filename_in, 'r') as h:
		for line in h:
			#put(line)
			parts = line.strip().split(' ')
			if len(parts) < 3: continue
			if parts[0] != 'DEF': continue
			#put(parts)
			name, addr = parts[1], int(parts[2][2:], 16)
			if name.startswith('s__'): continue	# Segment
			if name.startswith('l__'): continue	# Segment?
			if name.startswith('__'): continue	# Internals
			if name.startswith('.'): continue	# .ABS
			#put('"%s" at 0x%04x' % (name, addr))
			
			r += '#define %s%s_addr 0x%04x\n' % (segment_name, name, addr)
	
	put('Writing "%s"...' % filename_out)
	with open(filename_out, 'w') as h:
		h.write(r)
	