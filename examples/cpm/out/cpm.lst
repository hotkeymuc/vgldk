                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 4.0.0 #11528 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module cpm
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _main
                             12 	.globl _bios_memset
                             13 	.globl _gets
                             14 	.globl _printf_d
                             15 	.globl _printf
                             16 	.globl _puts
                             17 	.globl _vgldk_init
                             18 	.globl _beep
                             19 	.globl _sound_note
                             20 	.globl _vgl_sound_tone
                             21 	.globl _vgl_sound_off
                             22 	.globl _keyboard_getchar
                             23 	.globl _keyboard_checkkey
                             24 	.globl _keyboard_inkey
                             25 	.globl _lcd_putchar
                             26 	.globl _lcd_putchar_at
                             27 	.globl _lcd_scroll
                             28 	.globl _lcd_refresh
                             29 	.globl _lcd_init
                             30 	.globl _lcd_clear
                             31 	.globl _lcd_set_cursor
                             32 	.globl _lcd_writeData
                             33 	.globl _lcd_writeControl
                             34 	.globl _lcd_delay_short
                             35 	.globl _lcd_delay_long
                             36 	.globl _keyboard_getchar_last
                             37 	.globl _lcd_cursor
                             38 	.globl _lcd_y
                             39 	.globl _lcd_x
                             40 	.globl _lcd_scroll_cb
                             41 	.globl _lcd_buffer
                             42 	.globl _bint_timer
                             43 	.globl _bios_dummy_dph
                             44 	.globl _bios_sec
                             45 	.globl _bios_trk
                             46 	.globl _bios_dma
                             47 	.globl _bios_curdsk
                             48 	.globl _bios_iobyte
                             49 	.globl _bdos_ret_b
                             50 	.globl _bdos_ret_a
                             51 	.globl _bdos_param_e
                             52 	.globl _bdos_param_d
                             53 	.globl _bdos_param_c
                             54 	.globl _bdos_fcb
                             55 	.globl _bdos_user
                             56 	.globl _bdos_delimiter
                             57 	.globl _vgl_key_map
                             58 	.globl _lcd_map_4rows
                             59 	.globl _bdos
                             60 	.globl _bdos_putchar
                             61 	.globl _bdos_getchar
                             62 	.globl _bdos_puts
                             63 	.globl _bdos_gets
                             64 	.globl _bdos_printf
                             65 	.globl _bdos_printf_d
                             66 	.globl _bdos_strlen
                             67 	.globl _bdos_memset
                             68 	.globl _bdos_f_open
                             69 	.globl _bdos_f_close
                             70 	.globl _bdos_f_read
                             71 	.globl _bdos_f_readrand
                             72 	.globl _bdos_f_write
                             73 	.globl _bdos_f_writerand
                             74 	.globl _bdos_f_sfirst
                             75 	.globl _bdos_f_snext
                             76 	.globl _bdos_init
                             77 	.globl _bios_boot
                             78 	.globl _bios_wboot
                             79 	.globl _bios_const
                             80 	.globl _bios_conin
                             81 	.globl _bios_conout
                             82 	.globl _bios_list
                             83 	.globl _bios_punch
                             84 	.globl _bios_reader
                             85 	.globl _bios_home
                             86 	.globl _bios_seldsk
                             87 	.globl _bios_settrk
                             88 	.globl _bios_setsec
                             89 	.globl _bios_setdma
                             90 	.globl _bios_read
                             91 	.globl _bios_write
                             92 	.globl _bios_listst
                             93 	.globl _bios_sectran
                             94 	.globl _bios
                             95 	.globl _bint
                             96 ;--------------------------------------------------------
                             97 ; special function registers
                             98 ;--------------------------------------------------------
                     000A    99 _lcd_controlPort	=	0x000a
                     000B   100 _lcd_dataPort	=	0x000b
                     0010   101 _keyboard_port_matrixRowOut	=	0x0010
                     0010   102 _keyboard_port_matrixColIn	=	0x0010
                     0011   103 _keyboard_port_matrixColIn2	=	0x0011
                     0011   104 _keyboard_port_matrixLatch	=	0x0011
                            105 ;--------------------------------------------------------
                            106 ; ram data
                            107 ;--------------------------------------------------------
                            108 	.area _DATA
   0000                     109 _bdos_delimiter::
   0000                     110 	.ds 1
   0001                     111 _bdos_user::
   0001                     112 	.ds 1
                     005C   113 _bdos_fcb	=	0x005c
   0002                     114 _bdos_param_c::
   0002                     115 	.ds 1
   0003                     116 _bdos_param_d::
   0003                     117 	.ds 1
   0004                     118 _bdos_param_e::
   0004                     119 	.ds 1
   0005                     120 _bdos_ret_a::
   0005                     121 	.ds 1
   0006                     122 _bdos_ret_b::
   0006                     123 	.ds 1
                     0003   124 _bios_iobyte	=	0x0003
                     0004   125 _bios_curdsk	=	0x0004
   0007                     126 _bios_dma::
   0007                     127 	.ds 2
   0009                     128 _bios_trk::
   0009                     129 	.ds 2
   000B                     130 _bios_sec::
   000B                     131 	.ds 2
   000D                     132 _bios_dummy_dph::
   000D                     133 	.ds 1
   000E                     134 _bint_timer::
   000E                     135 	.ds 2
   0010                     136 _lcd_buffer::
   0010                     137 	.ds 80
   0060                     138 _lcd_scroll_cb::
   0060                     139 	.ds 2
                            140 ;--------------------------------------------------------
                            141 ; ram data
                            142 ;--------------------------------------------------------
                            143 	.area _INITIALIZED
   0000                     144 _lcd_x::
   0000                     145 	.ds 1
   0001                     146 _lcd_y::
   0001                     147 	.ds 1
   0002                     148 _lcd_cursor::
   0002                     149 	.ds 1
   0003                     150 _keyboard_getchar_last::
   0003                     151 	.ds 1
                            152 ;--------------------------------------------------------
                            153 ; absolute external ram data
                            154 ;--------------------------------------------------------
                            155 	.area _DABS (ABS)
                            156 ;--------------------------------------------------------
                            157 ; global & static initialisations
                            158 ;--------------------------------------------------------
                            159 	.area _HOME
                            160 	.area _GSINIT
                            161 	.area _GSFINAL
                            162 	.area _GSINIT
                            163 ;--------------------------------------------------------
                            164 ; Home
                            165 ;--------------------------------------------------------
                            166 	.area _HOME
                            167 	.area _HOME
                            168 ;--------------------------------------------------------
                            169 ; code
                            170 ;--------------------------------------------------------
                            171 	.area _CODE
                            172 ;./bdos.c:25: void bdos() __naked {
                            173 ;	---------------------------------
                            174 ; Function bdos
                            175 ; ---------------------------------
   0000                     176 _bdos::
                            177 ;./bdos.c:118: __endasm;
                            178 ;.asciz	'BDOS!' ; Mark in binary, so we can check if it is REALLY the first bytes in _CODE area
                            179 ;	Make registers available in C context
   0000 F5            [11]  180 	push	af
                            181 ;	Store BDOS function number "C"
   0001 79            [ 4]  182 	ld	a, c
   0002 32r02r00      [13]  183 	ld	(_bdos_param_c), a
                            184 ;	Store 8-bit argument "D"
   0005 7A            [ 4]  185 	ld	a, d
   0006 32r03r00      [13]  186 	ld	(_bdos_param_d), a
                            187 ;	Store 8-bit argument "E"
   0009 7B            [ 4]  188 	ld	a, e
   000A 32r04r00      [13]  189 	ld	(_bdos_param_e), a
   000D F1            [10]  190 	pop	af
                            191 ;./bdos.c:131: bdos_func = bdos_param_c;
   000E 3Ar02r00      [13]  192 	ld	a,(#_bdos_param_c + 0)
   0011 DD 77 FD      [19]  193 	ld	-3 (ix), a
                            194 ;./bdos.c:132: bdos_param_de = (word)bdos_param_d * 256 + (word)bdos_param_e;
   0014 21r03r00      [10]  195 	ld	hl,#_bdos_param_d + 0
   0017 46            [ 7]  196 	ld	b, (hl)
   0018 0E 00         [ 7]  197 	ld	c, #0x00
   001A FD 21r04r00   [14]  198 	ld	iy, #_bdos_param_e
   001E FD 6E 00      [19]  199 	ld	l, 0 (iy)
   0021 26 00         [ 7]  200 	ld	h, #0x00
   0023 09            [11]  201 	add	hl, bc
   0024 DD 75 FE      [19]  202 	ld	-2 (ix), l
   0027 DD 74 FF      [19]  203 	ld	-1 (ix), h
                            204 ;./bdos.c:140: switch(bdos_func) {
   002A 3E 28         [ 7]  205 	ld	a, #0x28
   002C DD 96 FD      [19]  206 	sub	a, -3 (ix)
   002F DAr9Br03      [10]  207 	jp	C, 00151$
   0032 DD 4E FD      [19]  208 	ld	c, -3 (ix)
   0035 06 00         [ 7]  209 	ld	b, #0x00
   0037 21r3Er00      [10]  210 	ld	hl, #00201$
   003A 09            [11]  211 	add	hl, bc
   003B 09            [11]  212 	add	hl, bc
   003C 09            [11]  213 	add	hl, bc
   003D E9            [ 4]  214 	jp	(hl)
   003E                     215 00201$:
   003E C3r1Fr06      [10]  216 	jp	_bdos_init
   0041 C3rBDr00      [10]  217 	jp	00102$
   0044 C3rD7r00      [10]  218 	jp	00103$
   0047 C3rE1r00      [10]  219 	jp	00104$
   004A C3rEEr00      [10]  220 	jp	00105$
   004D C3rF8r00      [10]  221 	jp	00106$
   0050 C3r02r01      [10]  222 	jp	00107$
   0053 C3r6Dr01      [10]  223 	jp	00117$
   0056 C3r7Dr01      [10]  224 	jp	00118$
   0059 C3r84r01      [10]  225 	jp	00119$
   005C C3r9Cr01      [10]  226 	jp	00123$
   005F C3rBAr01      [10]  227 	jp	00124$
   0062 C3rC7r01      [10]  228 	jp	00125$
   0065 C3rACr03      [10]  229 	jp	00152$
   0068 C3rE2r01      [10]  230 	jp	00127$
   006B C3rF9r01      [10]  231 	jp	00128$
   006E C3r1Br02      [10]  232 	jp	00129$
   0071 C3r3Dr02      [10]  233 	jp	00130$
   0074 C3r5Fr02      [10]  234 	jp	00131$
   0077 C3r74r02      [10]  235 	jp	00132$
   007A C3r82r02      [10]  236 	jp	00133$
   007D C3rA4r02      [10]  237 	jp	00134$
   0080 C3rB9r02      [10]  238 	jp	00135$
   0083 C3rC7r02      [10]  239 	jp	00136$
   0086 C3rD5r02      [10]  240 	jp	00137$
   0089 C3rF0r02      [10]  241 	jp	00138$
   008C C3r00r03      [10]  242 	jp	00139$
   008F C3rACr03      [10]  243 	jp	00152$
   0092 C3r9Br03      [10]  244 	jp	00151$
   0095 C3r9Br03      [10]  245 	jp	00151$
   0098 C3r9Br03      [10]  246 	jp	00151$
   009B C3r9Br03      [10]  247 	jp	00151$
   009E C3r0Cr03      [10]  248 	jp	00141$
   00A1 C3r3Cr03      [10]  249 	jp	00145$
   00A4 C3r5Er03      [10]  250 	jp	00146$
   00A7 C3r80r03      [10]  251 	jp	00147$
   00AA C3r89r03      [10]  252 	jp	00148$
   00AD C3rACr03      [10]  253 	jp	00152$
   00B0 C3r9Br03      [10]  254 	jp	00151$
   00B3 C3r9Br03      [10]  255 	jp	00151$
   00B6 C3r92r03      [10]  256 	jp	00150$
                            257 ;./bdos.c:142: case BDOS_FUNC_P_TERMCPM:	// 0: System reset
                            258 ;./bdos.c:160: __endasm;
   00B9 C3r1Fr06      [10]  259 	jp	_bdos_init
                            260 ;./bdos.c:161: break;
   00BC C9            [10]  261 	ret
                            262 ;./bdos.c:163: case BDOS_FUNC_C_READ:	// 1: Console input
   00BD                     263 00102$:
                            264 ;./bdos.c:164: s = bios_conin();	// Get a char from bios
   00BD CDrC9r0C      [17]  265 	call	_bios_conin
   00C0 7D            [ 4]  266 	ld	a, l
   00C1 47            [ 4]  267 	ld	b, a
                            268 ;./bdos.c:165: bios_conout(s);	// Echo it
   00C2 C5            [11]  269 	push	bc
   00C3 C5            [11]  270 	push	bc
   00C4 33            [ 6]  271 	inc	sp
   00C5 CDrCCr0C      [17]  272 	call	_bios_conout
   00C8 33            [ 6]  273 	inc	sp
   00C9 C1            [10]  274 	pop	bc
                            275 ;./bdos.c:166: bdos_return1(s);	// Return it
   00CA FD 21r05r00   [14]  276 	ld	iy, #_bdos_ret_a
   00CE FD 70 00      [19]  277 	ld	0 (iy), b
   00D1 3Ar05r00      [13]  278 	ld a, (_bdos_ret_a) 
   00D4 6F            [ 4]  279 	ld l, a 
   00D5 C9            [10]  280 	ret
                            281 ;./bdos.c:167: break;
   00D6 C9            [10]  282 	ret
                            283 ;./bdos.c:169: case BDOS_FUNC_C_WRITE:	// 2: Console output
   00D7                     284 00103$:
                            285 ;./bdos.c:170: bios_conout(bdos_param_e);
   00D7 3Ar04r00      [13]  286 	ld	a, (_bdos_param_e)
   00DA F5            [11]  287 	push	af
   00DB 33            [ 6]  288 	inc	sp
   00DC CDrCCr0C      [17]  289 	call	_bios_conout
   00DF 33            [ 6]  290 	inc	sp
                            291 ;./bdos.c:171: break;
   00E0 C9            [10]  292 	ret
                            293 ;./bdos.c:173: case BDOS_FUNC_A_READ:	// 3: Reader input
   00E1                     294 00104$:
                            295 ;./bdos.c:174: s = bios_reader();	// Get a char from bios
   00E1 CDrF0r0C      [17]  296 	call	_bios_reader
   00E4 7D            [ 4]  297 	ld	a, l
   00E5 32r05r00      [13]  298 	ld	(_bdos_ret_a+0), a
                            299 ;./bdos.c:177: bdos_return1(s);	// Return it
   00E8 3Ar05r00      [13]  300 	ld a, (_bdos_ret_a) 
   00EB 6F            [ 4]  301 	ld l, a 
   00EC C9            [10]  302 	ret
                            303 ;./bdos.c:178: break;
   00ED C9            [10]  304 	ret
                            305 ;./bdos.c:180: case BDOS_FUNC_A_WRITE:	// 4: Punch output
   00EE                     306 00105$:
                            307 ;./bdos.c:181: bios_punch(bdos_param_e);
   00EE 3Ar04r00      [13]  308 	ld	a, (_bdos_param_e)
   00F1 F5            [11]  309 	push	af
   00F2 33            [ 6]  310 	inc	sp
   00F3 CDrE4r0C      [17]  311 	call	_bios_punch
   00F6 33            [ 6]  312 	inc	sp
                            313 ;./bdos.c:182: break;
   00F7 C9            [10]  314 	ret
                            315 ;./bdos.c:184: case BDOS_FUNC_L_WRITE:	// 5: List output
   00F8                     316 00106$:
                            317 ;./bdos.c:185: bios_list(bdos_param_e);
   00F8 3Ar04r00      [13]  318 	ld	a, (_bdos_param_e)
   00FB F5            [11]  319 	push	af
   00FC 33            [ 6]  320 	inc	sp
   00FD CDrD8r0C      [17]  321 	call	_bios_list
   0100 33            [ 6]  322 	inc	sp
                            323 ;./bdos.c:186: break;
   0101 C9            [10]  324 	ret
                            325 ;./bdos.c:188: case BDOS_FUNC_C_RAWIO:	// 6: Direct console I/O
   0102                     326 00107$:
                            327 ;./bdos.c:190: switch(bdos_param_e) {
   0102 3Ar04r00      [13]  328 	ld	a,(#_bdos_param_e + 0)
   0105 FE FC         [ 7]  329 	cp	a, #0xfc
   0107 28 4D         [12]  330 	jr	Z,00114$
   0109 FE FD         [ 7]  331 	cp	a, #0xfd
   010B 28 3D         [12]  332 	jr	Z,00113$
   010D FE FE         [ 7]  333 	cp	a, #0xfe
   010F 28 2C         [12]  334 	jr	Z,00112$
   0111 3C            [ 4]  335 	inc	a
   0112 20 4F         [12]  336 	jr	NZ,00115$
                            337 ;./bdos.c:195: c = bios_const();
   0114 CDr96r0C      [17]  338 	call	_bios_const
   0117 4D            [ 4]  339 	ld	c, l
                            340 ;./bdos.c:196: if (c == 0xff) {	// Key is pressed
   0118 79            [ 4]  341 	ld	a, c
   0119 3C            [ 4]  342 	inc	a
   011A 20 07         [12]  343 	jr	NZ,00110$
                            344 ;./bdos.c:197: c = bios_conin();	// Get that key
   011C CDrC9r0C      [17]  345 	call	_bios_conin
   011F 7D            [ 4]  346 	ld	a, l
   0120 4F            [ 4]  347 	ld	c, a
   0121 18 0D         [12]  348 	jr	00111$
   0123                     349 00110$:
                            350 ;./bdos.c:201: bdos_return1(0);	// No new key
   0123 FD 21r05r00   [14]  351 	ld	iy, #_bdos_ret_a
   0127 FD 36 00 00   [19]  352 	ld	0 (iy), #0x00
   012B 3Ar05r00      [13]  353 	ld a, (_bdos_ret_a) 
   012E 6F            [ 4]  354 	ld l, a 
   012F C9            [10]  355 	ret
   0130                     356 00111$:
                            357 ;./bdos.c:206: bdos_return1(c);
   0130 FD 21r05r00   [14]  358 	ld	iy, #_bdos_ret_a
   0134 FD 71 00      [19]  359 	ld	0 (iy), c
   0137 3Ar05r00      [13]  360 	ld a, (_bdos_ret_a) 
   013A 6F            [ 4]  361 	ld l, a 
   013B C9            [10]  362 	ret
                            363 ;./bdos.c:207: break;
   013C C9            [10]  364 	ret
                            365 ;./bdos.c:209: case 0xfe:
   013D                     366 00112$:
                            367 ;./bdos.c:212: bdos_return1(bios_const());
   013D CDr96r0C      [17]  368 	call	_bios_const
   0140 7D            [ 4]  369 	ld	a, l
   0141 32r05r00      [13]  370 	ld	(_bdos_ret_a+0), a
   0144 3Ar05r00      [13]  371 	ld a, (_bdos_ret_a) 
   0147 6F            [ 4]  372 	ld l, a 
   0148 C9            [10]  373 	ret
                            374 ;./bdos.c:213: break;
   0149 C9            [10]  375 	ret
                            376 ;./bdos.c:214: case 0xfd:
   014A                     377 00113$:
                            378 ;./bdos.c:217: bdos_return1(bios_conin());	// Do NOT echo!
   014A CDrC9r0C      [17]  379 	call	_bios_conin
   014D 7D            [ 4]  380 	ld	a, l
   014E 32r05r00      [13]  381 	ld	(_bdos_ret_a+0), a
   0151 3Ar05r00      [13]  382 	ld a, (_bdos_ret_a) 
   0154 6F            [ 4]  383 	ld l, a 
   0155 C9            [10]  384 	ret
                            385 ;./bdos.c:218: case 0xfc:
   0156                     386 00114$:
                            387 ;./bdos.c:220: bdos_return1(0);
   0156 FD 21r05r00   [14]  388 	ld	iy, #_bdos_ret_a
   015A FD 36 00 00   [19]  389 	ld	0 (iy), #0x00
   015E 3Ar05r00      [13]  390 	ld a, (_bdos_ret_a) 
   0161 6F            [ 4]  391 	ld l, a 
   0162 C9            [10]  392 	ret
                            393 ;./bdos.c:221: default:
   0163                     394 00115$:
                            395 ;./bdos.c:222: bios_conout(bdos_param_e);
   0163 3Ar04r00      [13]  396 	ld	a, (_bdos_param_e)
   0166 F5            [11]  397 	push	af
   0167 33            [ 6]  398 	inc	sp
   0168 CDrCCr0C      [17]  399 	call	_bios_conout
   016B 33            [ 6]  400 	inc	sp
                            401 ;./bdos.c:224: break;
   016C C9            [10]  402 	ret
                            403 ;./bdos.c:226: case BDOS_FUNC_GET_IOBYTE:	// 7: Get I/O Byte
   016D                     404 00117$:
                            405 ;./bdos.c:227: bdos_return1(bios_iobyte);
   016D 3A 03 00      [13]  406 	ld	a,(#_bios_iobyte + 0)
   0170 FD 21r05r00   [14]  407 	ld	iy, #_bdos_ret_a
   0174 FD 77 00      [19]  408 	ld	0 (iy), a
   0177 3Ar05r00      [13]  409 	ld a, (_bdos_ret_a) 
   017A 6F            [ 4]  410 	ld l, a 
   017B C9            [10]  411 	ret
                            412 ;./bdos.c:228: break;
   017C C9            [10]  413 	ret
                            414 ;./bdos.c:230: case BDOS_FUNC_SET_IOBYTE:	// 8: Set I/O Byte
   017D                     415 00118$:
                            416 ;./bdos.c:231: bios_iobyte = bdos_param_e;
   017D 3Ar04r00      [13]  417 	ld	a,(#_bdos_param_e + 0)
   0180 32 03 00      [13]  418 	ld	(#_bios_iobyte + 0),a
                            419 ;./bdos.c:232: break;
   0183 C9            [10]  420 	ret
                            421 ;./bdos.c:234: case BDOS_FUNC_C_WRITESTR:	// 9: Print string (until delimiter "$")
   0184                     422 00119$:
                            423 ;./bdos.c:235: pc = (char *)bdos_param_de;
   0184 DD 4E FE      [19]  424 	ld	c, -2 (ix)
   0187 DD 46 FF      [19]  425 	ld	b, -1 (ix)
                            426 ;./bdos.c:236: while(*pc != bdos_delimiter) {
   018A                     427 00120$:
   018A 0A            [ 7]  428 	ld	a, (bc)
   018B 57            [ 4]  429 	ld	d, a
   018C 3Ar00r00      [13]  430 	ld	a,(#_bdos_delimiter + 0)
   018F 92            [ 4]  431 	sub	a, d
   0190 C8            [11]  432 	ret	Z
                            433 ;./bdos.c:237: bios_conout(*pc++);
   0191 03            [ 6]  434 	inc	bc
   0192 C5            [11]  435 	push	bc
   0193 D5            [11]  436 	push	de
   0194 33            [ 6]  437 	inc	sp
   0195 CDrCCr0C      [17]  438 	call	_bios_conout
   0198 33            [ 6]  439 	inc	sp
   0199 C1            [10]  440 	pop	bc
   019A 18 EE         [12]  441 	jr	00120$
                            442 ;./bdos.c:241: case BDOS_FUNC_C_READSTR:	// 10: Read console buffer
   019C                     443 00123$:
                            444 ;./bdos.c:242: pc = (char *)bdos_param_de;
   019C DD 4E FE      [19]  445 	ld	c, -2 (ix)
   019F DD 46 FF      [19]  446 	ld	b, -1 (ix)
                            447 ;./bdos.c:244: bdos_gets(pc);
   01A2 C5            [11]  448 	push	bc
   01A3 C5            [11]  449 	push	bc
   01A4 CDrE9r03      [17]  450 	call	_bdos_gets
   01A7 F1            [10]  451 	pop	af
   01A8 CDrA5r04      [17]  452 	call	_bdos_strlen
   01AB F1            [10]  453 	pop	af
                            454 ;./bdos.c:248: pc = (char *)(bdos_param_de + s);
   01AC 26 00         [ 7]  455 	ld	h, #0x00
   01AE DD 4E FE      [19]  456 	ld	c, -2 (ix)
   01B1 DD 46 FF      [19]  457 	ld	b, -1 (ix)
   01B4 09            [11]  458 	add	hl, bc
                            459 ;./bdos.c:249: *pc = bdos_delimiter;
   01B5 3Ar00r00      [13]  460 	ld	a,(#_bdos_delimiter + 0)
   01B8 77            [ 7]  461 	ld	(hl), a
                            462 ;./bdos.c:250: break;
   01B9 C9            [10]  463 	ret
                            464 ;./bdos.c:252: case BDOS_FUNC_C_STAT:	// 11: Get console status
   01BA                     465 00124$:
                            466 ;./bdos.c:255: bdos_return1(bios_const());
   01BA CDr96r0C      [17]  467 	call	_bios_const
   01BD 7D            [ 4]  468 	ld	a, l
   01BE 32r05r00      [13]  469 	ld	(_bdos_ret_a+0), a
   01C1 3Ar05r00      [13]  470 	ld a, (_bdos_ret_a) 
   01C4 6F            [ 4]  471 	ld l, a 
   01C5 C9            [10]  472 	ret
                            473 ;./bdos.c:256: break;
   01C6 C9            [10]  474 	ret
                            475 ;./bdos.c:258: case BDOS_FUNC_S_BDOSVER:	// 12: Return version number
   01C7                     476 00125$:
                            477 ;./bdos.c:262: bdos_return2(0, 0x22);
   01C7 FD 21r05r00   [14]  478 	ld	iy, #_bdos_ret_a
   01CB FD 36 00 00   [19]  479 	ld	0 (iy), #0x00
   01CF FD 21r06r00   [14]  480 	ld	iy, #_bdos_ret_b
   01D3 FD 36 00 22   [19]  481 	ld	0 (iy), #0x22
   01D7 3Ar06r00      [13]  482 	ld a, (_bdos_ret_b) 
   01DA 47            [ 4]  483 	ld b, a 
   01DB 67            [ 4]  484 	ld h, a 
   01DC 3Ar05r00      [13]  485 	ld a, (_bdos_ret_a) 
   01DF 6F            [ 4]  486 	ld l, a 
   01E0 C9            [10]  487 	ret
                            488 ;./bdos.c:263: break;
   01E1 C9            [10]  489 	ret
                            490 ;./bdos.c:270: case BDOS_FUNC_DRV_SET:	// 14: Select disk
   01E2                     491 00127$:
                            492 ;./bdos.c:274: bios_seldsk(bdos_param_e);
   01E2 3Ar04r00      [13]  493 	ld	a, (_bdos_param_e)
   01E5 F5            [11]  494 	push	af
   01E6 33            [ 6]  495 	inc	sp
   01E7 CDrFFr0C      [17]  496 	call	_bios_seldsk
   01EA 33            [ 6]  497 	inc	sp
                            498 ;./bdos.c:276: bdos_return1(0);	// 0 = OK, 0xff = error
   01EB FD 21r05r00   [14]  499 	ld	iy, #_bdos_ret_a
   01EF FD 36 00 00   [19]  500 	ld	0 (iy), #0x00
   01F3 3Ar05r00      [13]  501 	ld a, (_bdos_ret_a) 
   01F6 6F            [ 4]  502 	ld l, a 
   01F7 C9            [10]  503 	ret
                            504 ;./bdos.c:277: break;
   01F8 C9            [10]  505 	ret
                            506 ;./bdos.c:279: case BDOS_FUNC_F_OPEN:	// 15: Open file
   01F9                     507 00128$:
                            508 ;./bdos.c:287: s = bdos_f_open((struct FCB *)bdos_param_de);
   01F9 DD 4E FE      [19]  509 	ld	c, -2 (ix)
   01FC DD 46 FF      [19]  510 	ld	b, -1 (ix)
   01FF C5            [11]  511 	push	bc
   0200 CDrCDr04      [17]  512 	call	_bdos_f_open
   0203 F1            [10]  513 	pop	af
   0204 7D            [ 4]  514 	ld	a, l
   0205 32r05r00      [13]  515 	ld	(_bdos_ret_a+0), a
                            516 ;./bdos.c:289: bdos_return2(s, 0);
   0208 FD 21r06r00   [14]  517 	ld	iy, #_bdos_ret_b
   020C FD 36 00 00   [19]  518 	ld	0 (iy), #0x00
   0210 3Ar06r00      [13]  519 	ld a, (_bdos_ret_b) 
   0213 47            [ 4]  520 	ld b, a 
   0214 67            [ 4]  521 	ld h, a 
   0215 3Ar05r00      [13]  522 	ld a, (_bdos_ret_a) 
   0218 6F            [ 4]  523 	ld l, a 
   0219 C9            [10]  524 	ret
                            525 ;./bdos.c:290: break;
   021A C9            [10]  526 	ret
                            527 ;./bdos.c:292: case BDOS_FUNC_F_CLOSE:	// 16: Close file
   021B                     528 00129$:
                            529 ;./bdos.c:297: s = bdos_f_close((struct FCB *)bdos_param_de);
   021B DD 4E FE      [19]  530 	ld	c, -2 (ix)
   021E DD 46 FF      [19]  531 	ld	b, -1 (ix)
   0221 C5            [11]  532 	push	bc
   0222 CDrE8r04      [17]  533 	call	_bdos_f_close
   0225 F1            [10]  534 	pop	af
   0226 7D            [ 4]  535 	ld	a, l
   0227 32r05r00      [13]  536 	ld	(_bdos_ret_a+0), a
                            537 ;./bdos.c:298: bdos_return2(s, 0);
   022A FD 21r06r00   [14]  538 	ld	iy, #_bdos_ret_b
   022E FD 36 00 00   [19]  539 	ld	0 (iy), #0x00
   0232 3Ar06r00      [13]  540 	ld a, (_bdos_ret_b) 
   0235 47            [ 4]  541 	ld b, a 
   0236 67            [ 4]  542 	ld h, a 
   0237 3Ar05r00      [13]  543 	ld a, (_bdos_ret_a) 
   023A 6F            [ 4]  544 	ld l, a 
   023B C9            [10]  545 	ret
                            546 ;./bdos.c:299: break;
   023C C9            [10]  547 	ret
                            548 ;./bdos.c:301: case BDOS_FUNC_F_SFIRST:	// 17: Search for first
   023D                     549 00130$:
                            550 ;./bdos.c:305: s = bdos_f_sfirst((struct FCB *)bdos_param_de);
   023D DD 4E FE      [19]  551 	ld	c, -2 (ix)
   0240 DD 46 FF      [19]  552 	ld	b, -1 (ix)
   0243 C5            [11]  553 	push	bc
   0244 CDrE4r05      [17]  554 	call	_bdos_f_sfirst
   0247 F1            [10]  555 	pop	af
   0248 7D            [ 4]  556 	ld	a, l
   0249 32r05r00      [13]  557 	ld	(_bdos_ret_a+0), a
                            558 ;./bdos.c:307: bdos_return2(s, 0);
   024C FD 21r06r00   [14]  559 	ld	iy, #_bdos_ret_b
   0250 FD 36 00 00   [19]  560 	ld	0 (iy), #0x00
   0254 3Ar06r00      [13]  561 	ld a, (_bdos_ret_b) 
   0257 47            [ 4]  562 	ld b, a 
   0258 67            [ 4]  563 	ld h, a 
   0259 3Ar05r00      [13]  564 	ld a, (_bdos_ret_a) 
   025C 6F            [ 4]  565 	ld l, a 
   025D C9            [10]  566 	ret
                            567 ;./bdos.c:308: break;
   025E C9            [10]  568 	ret
                            569 ;./bdos.c:310: case BDOS_FUNC_F_SNEXT:	// 18: Search for next
   025F                     570 00131$:
                            571 ;./bdos.c:312: s = bdos_f_snext((struct FCB *)bdos_param_de);
   025F DD 4E FE      [19]  572 	ld	c, -2 (ix)
   0262 DD 46 FF      [19]  573 	ld	b, -1 (ix)
   0265 C5            [11]  574 	push	bc
   0266 CDr02r06      [17]  575 	call	_bdos_f_snext
   0269 F1            [10]  576 	pop	af
   026A 7D            [ 4]  577 	ld	a, l
   026B 32r05r00      [13]  578 	ld	(_bdos_ret_a+0), a
                            579 ;./bdos.c:313: bdos_return1(s);
   026E 3Ar05r00      [13]  580 	ld a, (_bdos_ret_a) 
   0271 6F            [ 4]  581 	ld l, a 
   0272 C9            [10]  582 	ret
                            583 ;./bdos.c:314: break;
   0273 C9            [10]  584 	ret
                            585 ;./bdos.c:316: case BDOS_FUNC_F_DELETE:	// 19: Delete file
   0274                     586 00132$:
                            587 ;./bdos.c:321: bdos_return1(0xff);
   0274 FD 21r05r00   [14]  588 	ld	iy, #_bdos_ret_a
   0278 FD 36 00 FF   [19]  589 	ld	0 (iy), #0xff
   027C 3Ar05r00      [13]  590 	ld a, (_bdos_ret_a) 
   027F 6F            [ 4]  591 	ld l, a 
   0280 C9            [10]  592 	ret
                            593 ;./bdos.c:322: break;
   0281 C9            [10]  594 	ret
                            595 ;./bdos.c:324: case BDOS_FUNC_F_READ:	// 20: Read sequential
   0282                     596 00133$:
                            597 ;./bdos.c:334: s = bdos_f_read((struct FCB *)bdos_param_de);
   0282 DD 4E FE      [19]  598 	ld	c, -2 (ix)
   0285 DD 46 FF      [19]  599 	ld	b, -1 (ix)
   0288 C5            [11]  600 	push	bc
   0289 CDr05r05      [17]  601 	call	_bdos_f_read
   028C F1            [10]  602 	pop	af
   028D 7D            [ 4]  603 	ld	a, l
   028E 32r05r00      [13]  604 	ld	(_bdos_ret_a+0), a
                            605 ;./bdos.c:335: bdos_return2(s, 0);
   0291 FD 21r06r00   [14]  606 	ld	iy, #_bdos_ret_b
   0295 FD 36 00 00   [19]  607 	ld	0 (iy), #0x00
   0299 3Ar06r00      [13]  608 	ld a, (_bdos_ret_b) 
   029C 47            [ 4]  609 	ld b, a 
   029D 67            [ 4]  610 	ld h, a 
   029E 3Ar05r00      [13]  611 	ld a, (_bdos_ret_a) 
   02A1 6F            [ 4]  612 	ld l, a 
   02A2 C9            [10]  613 	ret
                            614 ;./bdos.c:336: break;
   02A3 C9            [10]  615 	ret
                            616 ;./bdos.c:338: case BDOS_FUNC_F_WRITE:	// 21: Write sequential
   02A4                     617 00134$:
                            618 ;./bdos.c:350: bdos_return1(bdos_f_write((struct FCB *)bdos_param_de));
   02A4 DD 4E FE      [19]  619 	ld	c, -2 (ix)
   02A7 DD 46 FF      [19]  620 	ld	b, -1 (ix)
   02AA C5            [11]  621 	push	bc
   02AB CDrA6r05      [17]  622 	call	_bdos_f_write
   02AE F1            [10]  623 	pop	af
   02AF 7D            [ 4]  624 	ld	a, l
   02B0 32r05r00      [13]  625 	ld	(_bdos_ret_a+0), a
   02B3 3Ar05r00      [13]  626 	ld a, (_bdos_ret_a) 
   02B6 6F            [ 4]  627 	ld l, a 
   02B7 C9            [10]  628 	ret
                            629 ;./bdos.c:351: break;
   02B8 C9            [10]  630 	ret
                            631 ;./bdos.c:353: case BDOS_FUNC_F_MAKE:	// 22: Make file
   02B9                     632 00135$:
                            633 ;./bdos.c:357: bdos_return1(0xff);	// 0xff if directory is full
   02B9 FD 21r05r00   [14]  634 	ld	iy, #_bdos_ret_a
   02BD FD 36 00 FF   [19]  635 	ld	0 (iy), #0xff
   02C1 3Ar05r00      [13]  636 	ld a, (_bdos_ret_a) 
   02C4 6F            [ 4]  637 	ld l, a 
   02C5 C9            [10]  638 	ret
                            639 ;./bdos.c:358: break;
   02C6 C9            [10]  640 	ret
                            641 ;./bdos.c:360: case BDOS_FUNC_F_RENAME:	// 23: Rename file
   02C7                     642 00136$:
                            643 ;./bdos.c:364: bdos_return1(0xff);	// Returns A=0-3 if successful; A=0FFh if error. Under CP/M 3, if H is zero then the file could not be found
   02C7 FD 21r05r00   [14]  644 	ld	iy, #_bdos_ret_a
   02CB FD 36 00 FF   [19]  645 	ld	0 (iy), #0xff
   02CF 3Ar05r00      [13]  646 	ld a, (_bdos_ret_a) 
   02D2 6F            [ 4]  647 	ld l, a 
   02D3 C9            [10]  648 	ret
                            649 ;./bdos.c:365: break;
   02D4 C9            [10]  650 	ret
                            651 ;./bdos.c:367: case BDOS_FUNC_DRV_LOGINVEC:	// 24: Return login vector
   02D5                     652 00137$:
                            653 ;./bdos.c:369: bdos_return2(0x00, 0x01);	// 0x00 0x01 = Only drive A
   02D5 FD 21r05r00   [14]  654 	ld	iy, #_bdos_ret_a
   02D9 FD 36 00 00   [19]  655 	ld	0 (iy), #0x00
   02DD FD 21r06r00   [14]  656 	ld	iy, #_bdos_ret_b
   02E1 FD 36 00 01   [19]  657 	ld	0 (iy), #0x01
   02E5 3Ar06r00      [13]  658 	ld a, (_bdos_ret_b) 
   02E8 47            [ 4]  659 	ld b, a 
   02E9 67            [ 4]  660 	ld h, a 
   02EA 3Ar05r00      [13]  661 	ld a, (_bdos_ret_a) 
   02ED 6F            [ 4]  662 	ld l, a 
   02EE C9            [10]  663 	ret
                            664 ;./bdos.c:370: break;
   02EF C9            [10]  665 	ret
                            666 ;./bdos.c:372: case BDOS_FUNC_DRV_GET:	// 25: Return current disk
   02F0                     667 00138$:
                            668 ;./bdos.c:374: bdos_return1(bios_curdsk);
   02F0 3A 04 00      [13]  669 	ld	a,(#_bios_curdsk + 0)
   02F3 FD 21r05r00   [14]  670 	ld	iy, #_bdos_ret_a
   02F7 FD 77 00      [19]  671 	ld	0 (iy), a
   02FA 3Ar05r00      [13]  672 	ld a, (_bdos_ret_a) 
   02FD 6F            [ 4]  673 	ld l, a 
   02FE C9            [10]  674 	ret
                            675 ;./bdos.c:375: break;
   02FF C9            [10]  676 	ret
                            677 ;./bdos.c:377: case BDOS_FUNC_F_DMAOFF:	// 26: Set DMA address
   0300                     678 00139$:
                            679 ;./bdos.c:381: bios_setdma((byte *)bdos_param_de);
   0300 DD 4E FE      [19]  680 	ld	c, -2 (ix)
   0303 DD 46 FF      [19]  681 	ld	b, -1 (ix)
   0306 C5            [11]  682 	push	bc
   0307 CDr31r0D      [17]  683 	call	_bios_setdma
   030A F1            [10]  684 	pop	af
                            685 ;./bdos.c:382: break;
   030B C9            [10]  686 	ret
                            687 ;./bdos.c:401: case BDOS_FUNC_F_USERNUM:	// 32: Set/Get user code
   030C                     688 00141$:
                            689 ;./bdos.c:410: if (bdos_param_e == 0xff) {
   030C 3Ar04r00      [13]  690 	ld	a,(#_bdos_param_e + 0)
   030F 3C            [ 4]  691 	inc	a
   0310 20 10         [12]  692 	jr	NZ,00143$
                            693 ;./bdos.c:411: bdos_return1(bdos_user);
   0312 3Ar01r00      [13]  694 	ld	a,(#_bdos_user + 0)
   0315 FD 21r05r00   [14]  695 	ld	iy, #_bdos_ret_a
   0319 FD 77 00      [19]  696 	ld	0 (iy), a
   031C 3Ar05r00      [13]  697 	ld a, (_bdos_ret_a) 
   031F 6F            [ 4]  698 	ld l, a 
   0320 C9            [10]  699 	ret
   0321 C9            [10]  700 	ret
   0322                     701 00143$:
                            702 ;./bdos.c:413: bdos_user = bdos_param_e;
   0322 3Ar04r00      [13]  703 	ld	a,(#_bdos_param_e + 0)
   0325 FD 21r01r00   [14]  704 	ld	iy, #_bdos_user
   0329 FD 77 00      [19]  705 	ld	0 (iy), a
                            706 ;./bdos.c:414: bdos_return1(bdos_user);
   032C FD 7E 00      [19]  707 	ld	a, 0 (iy)
   032F FD 21r05r00   [14]  708 	ld	iy, #_bdos_ret_a
   0333 FD 77 00      [19]  709 	ld	0 (iy), a
   0336 3Ar05r00      [13]  710 	ld a, (_bdos_ret_a) 
   0339 6F            [ 4]  711 	ld l, a 
   033A C9            [10]  712 	ret
                            713 ;./bdos.c:416: break;
   033B C9            [10]  714 	ret
                            715 ;./bdos.c:418: case BDOS_FUNC_F_READRAND:	// 33: Read random
   033C                     716 00145$:
                            717 ;./bdos.c:419: s = bdos_f_readrand((struct FCB *)bdos_param_de);
   033C DD 4E FE      [19]  718 	ld	c, -2 (ix)
   033F DD 46 FF      [19]  719 	ld	b, -1 (ix)
   0342 C5            [11]  720 	push	bc
   0343 CDr21r05      [17]  721 	call	_bdos_f_readrand
   0346 F1            [10]  722 	pop	af
   0347 7D            [ 4]  723 	ld	a, l
   0348 32r05r00      [13]  724 	ld	(_bdos_ret_a+0), a
                            725 ;./bdos.c:420: bdos_return2(s, 0);
   034B FD 21r06r00   [14]  726 	ld	iy, #_bdos_ret_b
   034F FD 36 00 00   [19]  727 	ld	0 (iy), #0x00
   0353 3Ar06r00      [13]  728 	ld a, (_bdos_ret_b) 
   0356 47            [ 4]  729 	ld b, a 
   0357 67            [ 4]  730 	ld h, a 
   0358 3Ar05r00      [13]  731 	ld a, (_bdos_ret_a) 
   035B 6F            [ 4]  732 	ld l, a 
   035C C9            [10]  733 	ret
                            734 ;./bdos.c:421: break;
   035D C9            [10]  735 	ret
                            736 ;./bdos.c:423: case BDOS_FUNC_F_WRITERAND:	// 34: Write random
   035E                     737 00146$:
                            738 ;./bdos.c:425: s = bdos_f_writerand((struct FCB *)bdos_param_de);
   035E DD 4E FE      [19]  739 	ld	c, -2 (ix)
   0361 DD 46 FF      [19]  740 	ld	b, -1 (ix)
   0364 C5            [11]  741 	push	bc
   0365 CDrC3r05      [17]  742 	call	_bdos_f_writerand
   0368 F1            [10]  743 	pop	af
   0369 7D            [ 4]  744 	ld	a, l
   036A 32r05r00      [13]  745 	ld	(_bdos_ret_a+0), a
                            746 ;./bdos.c:426: bdos_return2(s, 0);
   036D FD 21r06r00   [14]  747 	ld	iy, #_bdos_ret_b
   0371 FD 36 00 00   [19]  748 	ld	0 (iy), #0x00
   0375 3Ar06r00      [13]  749 	ld a, (_bdos_ret_b) 
   0378 47            [ 4]  750 	ld b, a 
   0379 67            [ 4]  751 	ld h, a 
   037A 3Ar05r00      [13]  752 	ld a, (_bdos_ret_a) 
   037D 6F            [ 4]  753 	ld l, a 
   037E C9            [10]  754 	ret
                            755 ;./bdos.c:427: break;
   037F C9            [10]  756 	ret
                            757 ;./bdos.c:429: case BDOS_FUNC_F_SIZE:	// 35: Compute file size
   0380                     758 00147$:
                            759 ;./bdos.c:439: bdos_puts("SIZE");
   0380 21rB9r03      [10]  760 	ld	hl, #___str_0
   0383 E5            [11]  761 	push	hl
   0384 CDrD7r03      [17]  762 	call	_bdos_puts
   0387 F1            [10]  763 	pop	af
                            764 ;./bdos.c:440: break;
   0388 C9            [10]  765 	ret
                            766 ;./bdos.c:442: case BDOS_FUNC_F_RANDREC:	// 36: Set random record
   0389                     767 00148$:
                            768 ;./bdos.c:444: bdos_puts("RANDREC");
   0389 21rBEr03      [10]  769 	ld	hl, #___str_1
   038C E5            [11]  770 	push	hl
   038D CDrD7r03      [17]  771 	call	_bdos_puts
   0390 F1            [10]  772 	pop	af
                            773 ;./bdos.c:453: break;
   0391 C9            [10]  774 	ret
                            775 ;./bdos.c:462: case BDOS_FUNC_F_WRITEZF:	// 40: Fill random file w/ zeros
   0392                     776 00150$:
                            777 ;./bdos.c:463: bdos_puts("WRITEZF");
   0392 21rC6r03      [10]  778 	ld	hl, #___str_2
   0395 E5            [11]  779 	push	hl
   0396 CDrD7r03      [17]  780 	call	_bdos_puts
   0399 F1            [10]  781 	pop	af
                            782 ;./bdos.c:465: break;
   039A C9            [10]  783 	ret
                            784 ;./bdos.c:478: default:
   039B                     785 00151$:
                            786 ;./bdos.c:479: bdos_printf_d("BDOS#", bdos_func);
   039B DD 7E FD      [19]  787 	ld	a, -3 (ix)
   039E F5            [11]  788 	push	af
   039F 33            [ 6]  789 	inc	sp
   03A0 21rCEr03      [10]  790 	ld	hl, #___str_3
   03A3 E5            [11]  791 	push	hl
   03A4 CDr5Fr04      [17]  792 	call	_bdos_printf_d
   03A7 F1            [10]  793 	pop	af
   03A8 33            [ 6]  794 	inc	sp
                            795 ;./bdos.c:480: bdos_getchar();
   03A9 CDrD4r03      [17]  796 	call	_bdos_getchar
                            797 ;./bdos.c:481: }
   03AC                     798 00152$:
                            799 ;./bdos.c:485: __endasm;
   03AC C9            [10]  800 	ret
                            801 ;./bdos.c:486: }
                            802 ;./bdos.c:495: void bdos_putchar(char c) {
                            803 ;	---------------------------------
                            804 ; Function bdos_putchar
                            805 ; ---------------------------------
   03AD                     806 _bdos_putchar::
                            807 ;./bdos.c:496: bios_conout(c);
   03AD 21 02 00      [10]  808 	ld	hl, #2+0
   03B0 39            [11]  809 	add	hl, sp
   03B1 7E            [ 7]  810 	ld	a, (hl)
   03B2 F5            [11]  811 	push	af
   03B3 33            [ 6]  812 	inc	sp
   03B4 CDrCCr0C      [17]  813 	call	_bios_conout
   03B7 33            [ 6]  814 	inc	sp
                            815 ;./bdos.c:497: }
   03B8 C9            [10]  816 	ret
   03B9                     817 ___str_0:
   03B9 53 49 5A 45         818 	.ascii "SIZE"
   03BD 00                  819 	.db 0x00
   03BE                     820 ___str_1:
   03BE 52 41 4E 44 52 45   821 	.ascii "RANDREC"
        43
   03C5 00                  822 	.db 0x00
   03C6                     823 ___str_2:
   03C6 57 52 49 54 45 5A   824 	.ascii "WRITEZF"
        46
   03CD 00                  825 	.db 0x00
   03CE                     826 ___str_3:
   03CE 42 44 4F 53 23      827 	.ascii "BDOS#"
   03D3 00                  828 	.db 0x00
                            829 ;./bdos.c:498: byte bdos_getchar() {
                            830 ;	---------------------------------
                            831 ; Function bdos_getchar
                            832 ; ---------------------------------
   03D4                     833 _bdos_getchar::
                            834 ;./bdos.c:499: return bios_conin();
                            835 ;./bdos.c:500: }
   03D4 C3rC9r0C      [10]  836 	jp	_bios_conin
                            837 ;./bdos.c:502: void bdos_puts(const char *str) {
                            838 ;	---------------------------------
                            839 ; Function bdos_puts
                            840 ; ---------------------------------
   03D7                     841 _bdos_puts::
                            842 ;./bdos.c:503: while(*str) bios_conout(*str++);
   03D7 D1            [10]  843 	pop	de
   03D8 C1            [10]  844 	pop	bc
   03D9 C5            [11]  845 	push	bc
   03DA D5            [11]  846 	push	de
   03DB                     847 00101$:
   03DB 0A            [ 7]  848 	ld	a, (bc)
   03DC B7            [ 4]  849 	or	a, a
   03DD C8            [11]  850 	ret	Z
   03DE 03            [ 6]  851 	inc	bc
   03DF C5            [11]  852 	push	bc
   03E0 F5            [11]  853 	push	af
   03E1 33            [ 6]  854 	inc	sp
   03E2 CDrCCr0C      [17]  855 	call	_bios_conout
   03E5 33            [ 6]  856 	inc	sp
   03E6 C1            [10]  857 	pop	bc
                            858 ;./bdos.c:504: }
   03E7 18 F2         [12]  859 	jr	00101$
                            860 ;./bdos.c:505: void bdos_gets(char *pc) {
                            861 ;	---------------------------------
                            862 ; Function bdos_gets
                            863 ; ---------------------------------
   03E9                     864 _bdos_gets::
   03E9 DD E5         [15]  865 	push	ix
   03EB DD 21 00 00   [14]  866 	ld	ix,#0
   03EF DD 39         [15]  867 	add	ix,sp
                            868 ;./bdos.c:508: pcs = pc;
   03F1 DD 4E 04      [19]  869 	ld	c, 4 (ix)
   03F4 DD 46 05      [19]  870 	ld	b, 5 (ix)
                            871 ;./bdos.c:510: while(1) {
   03F7                     872 00111$:
                            873 ;./bdos.c:511: c = bios_conin();
   03F7 C5            [11]  874 	push	bc
   03F8 CDrC9r0C      [17]  875 	call	_bios_conin
   03FB 7D            [ 4]  876 	ld	a, l
   03FC C1            [10]  877 	pop	bc
                            878 ;./bdos.c:512: if ( (c == 8) || (c == 127) ) {
   03FD 57            [ 4]  879 	ld	d, a
   03FE D6 08         [ 7]  880 	sub	a, #0x08
   0400 28 05         [12]  881 	jr	Z,00103$
   0402 7A            [ 4]  882 	ld	a, d
   0403 D6 7F         [ 7]  883 	sub	a, #0x7f
   0405 20 19         [12]  884 	jr	NZ,00104$
   0407                     885 00103$:
                            886 ;./bdos.c:514: if (pc > pcs) {
   0407 79            [ 4]  887 	ld	a, c
   0408 DD 96 04      [19]  888 	sub	a, 4 (ix)
   040B 78            [ 4]  889 	ld	a, b
   040C DD 9E 05      [19]  890 	sbc	a, 5 (ix)
   040F 30 E6         [12]  891 	jr	NC,00111$
                            892 ;./bdos.c:515: pc--;
   0411 DD 6E 04      [19]  893 	ld	l, 4 (ix)
   0414 DD 66 05      [19]  894 	ld	h, 5 (ix)
   0417 2B            [ 6]  895 	dec	hl
   0418 DD 75 04      [19]  896 	ld	4 (ix), l
   041B DD 74 05      [19]  897 	ld	5 (ix), h
                            898 ;./bdos.c:523: continue;
   041E 18 D7         [12]  899 	jr	00111$
   0420                     900 00104$:
                            901 ;./bdos.c:526: bios_conout(c);
   0420 C5            [11]  902 	push	bc
   0421 D5            [11]  903 	push	de
   0422 D5            [11]  904 	push	de
   0423 33            [ 6]  905 	inc	sp
   0424 CDrCCr0C      [17]  906 	call	_bios_conout
   0427 33            [ 6]  907 	inc	sp
   0428 D1            [10]  908 	pop	de
   0429 C1            [10]  909 	pop	bc
                            910 ;./bdos.c:508: pcs = pc;
   042A DD 6E 04      [19]  911 	ld	l, 4 (ix)
   042D DD 66 05      [19]  912 	ld	h, 5 (ix)
                            913 ;./bdos.c:528: if ((c == '\n') || (c == '\r') || (c == 0)) {
   0430 7A            [ 4]  914 	ld	a,d
   0431 FE 0A         [ 7]  915 	cp	a,#0x0a
   0433 28 07         [12]  916 	jr	Z,00106$
   0435 FE 0D         [ 7]  917 	cp	a,#0x0d
   0437 28 03         [12]  918 	jr	Z,00106$
   0439 B7            [ 4]  919 	or	a, a
   043A 20 04         [12]  920 	jr	NZ,00107$
   043C                     921 00106$:
                            922 ;./bdos.c:532: *pc = 0;
   043C 36 00         [10]  923 	ld	(hl), #0x00
                            924 ;./bdos.c:533: return;
   043E 18 0A         [12]  925 	jr	00113$
   0440                     926 00107$:
                            927 ;./bdos.c:537: *pc++ = c;
   0440 72            [ 7]  928 	ld	(hl), d
   0441 23            [ 6]  929 	inc	hl
   0442 DD 75 04      [19]  930 	ld	4 (ix), l
   0445 DD 74 05      [19]  931 	ld	5 (ix), h
   0448 18 AD         [12]  932 	jr	00111$
   044A                     933 00113$:
                            934 ;./bdos.c:539: }
   044A DD E1         [14]  935 	pop	ix
   044C C9            [10]  936 	ret
                            937 ;./bdos.c:542: void bdos_printf(char *pc) {
                            938 ;	---------------------------------
                            939 ; Function bdos_printf
                            940 ; ---------------------------------
   044D                     941 _bdos_printf::
                            942 ;./bdos.c:544: c = *pc;
   044D C1            [10]  943 	pop	bc
   044E E1            [10]  944 	pop	hl
   044F E5            [11]  945 	push	hl
   0450 C5            [11]  946 	push	bc
   0451 46            [ 7]  947 	ld	b, (hl)
                            948 ;./bdos.c:545: while(c != 0) {
   0452                     949 00101$:
   0452 78            [ 4]  950 	ld	a, b
   0453 B7            [ 4]  951 	or	a, a
   0454 C8            [11]  952 	ret	Z
                            953 ;./bdos.c:546: bios_conout(c);
   0455 C5            [11]  954 	push	bc
   0456 C5            [11]  955 	push	bc
   0457 33            [ 6]  956 	inc	sp
   0458 CDrCCr0C      [17]  957 	call	_bios_conout
   045B 33            [ 6]  958 	inc	sp
   045C C1            [10]  959 	pop	bc
                            960 ;./bdos.c:547: pc++;
                            961 ;./bdos.c:549: }
   045D 18 F3         [12]  962 	jr	00101$
                            963 ;./bdos.c:551: void bdos_printf_d(char *pc, byte d) {
                            964 ;	---------------------------------
                            965 ; Function bdos_printf_d
                            966 ; ---------------------------------
   045F                     967 _bdos_printf_d::
                            968 ;./bdos.c:554: bdos_printf(pc);
   045F C1            [10]  969 	pop	bc
   0460 E1            [10]  970 	pop	hl
   0461 E5            [11]  971 	push	hl
   0462 C5            [11]  972 	push	bc
   0463 E5            [11]  973 	push	hl
   0464 CDr4Dr04      [17]  974 	call	_bdos_printf
   0467 F1            [10]  975 	pop	af
                            976 ;./bdos.c:555: i = 100;
   0468 0E 64         [ 7]  977 	ld	c, #0x64
                            978 ;./bdos.c:556: while(i > 0) {
   046A                     979 00101$:
   046A 79            [ 4]  980 	ld	a, c
   046B B7            [ 4]  981 	or	a, a
   046C C8            [11]  982 	ret	Z
                            983 ;./bdos.c:557: bios_conout('0' + ((d / i) % 10));
   046D C5            [11]  984 	push	bc
   046E 79            [ 4]  985 	ld	a, c
   046F F5            [11]  986 	push	af
   0470 33            [ 6]  987 	inc	sp
   0471 21 07 00      [10]  988 	ld	hl, #7+0
   0474 39            [11]  989 	add	hl, sp
   0475 7E            [ 7]  990 	ld	a, (hl)
   0476 F5            [11]  991 	push	af
   0477 33            [ 6]  992 	inc	sp
   0478 CDr00r00      [17]  993 	call	__divuchar
   047B F1            [10]  994 	pop	af
   047C C1            [10]  995 	pop	bc
   047D 26 00         [ 7]  996 	ld	h, #0x00
   047F C5            [11]  997 	push	bc
   0480 11 0A 00      [10]  998 	ld	de, #0x000a
   0483 D5            [11]  999 	push	de
   0484 E5            [11] 1000 	push	hl
   0485 CDr00r00      [17] 1001 	call	__modsint
   0488 F1            [10] 1002 	pop	af
   0489 F1            [10] 1003 	pop	af
   048A C1            [10] 1004 	pop	bc
   048B 7D            [ 4] 1005 	ld	a, l
   048C C6 30         [ 7] 1006 	add	a, #0x30
   048E C5            [11] 1007 	push	bc
   048F F5            [11] 1008 	push	af
   0490 33            [ 6] 1009 	inc	sp
   0491 CDrCCr0C      [17] 1010 	call	_bios_conout
   0494 33            [ 6] 1011 	inc	sp
   0495 C1            [10] 1012 	pop	bc
                           1013 ;./bdos.c:558: i /= 10;
   0496 06 00         [ 7] 1014 	ld	b, #0x00
   0498 21 0A 00      [10] 1015 	ld	hl, #0x000a
   049B E5            [11] 1016 	push	hl
   049C C5            [11] 1017 	push	bc
   049D CDr00r00      [17] 1018 	call	__divsint
   04A0 F1            [10] 1019 	pop	af
   04A1 F1            [10] 1020 	pop	af
   04A2 4D            [ 4] 1021 	ld	c, l
                           1022 ;./bdos.c:561: }
   04A3 18 C5         [12] 1023 	jr	00101$
                           1024 ;./bdos.c:566: byte bdos_strlen(const char *c) {
                           1025 ;	---------------------------------
                           1026 ; Function bdos_strlen
                           1027 ; ---------------------------------
   04A5                    1028 _bdos_strlen::
                           1029 ;./bdos.c:569: while (*c++ != 0)  {
   04A5 0E 00         [ 7] 1030 	ld	c, #0x00
   04A7 D1            [10] 1031 	pop	de
   04A8 E1            [10] 1032 	pop	hl
   04A9 E5            [11] 1033 	push	hl
   04AA D5            [11] 1034 	push	de
   04AB                    1035 00101$:
   04AB 7E            [ 7] 1036 	ld	a, (hl)
   04AC 23            [ 6] 1037 	inc	hl
   04AD B7            [ 4] 1038 	or	a, a
   04AE 28 03         [12] 1039 	jr	Z,00103$
                           1040 ;./bdos.c:570: l++;
   04B0 0C            [ 4] 1041 	inc	c
   04B1 18 F8         [12] 1042 	jr	00101$
   04B3                    1043 00103$:
                           1044 ;./bdos.c:572: return l;
   04B3 69            [ 4] 1045 	ld	l, c
                           1046 ;./bdos.c:573: }
   04B4 C9            [10] 1047 	ret
                           1048 ;./bdos.c:574: void bdos_memset(byte *addr, byte b, word count) {
                           1049 ;	---------------------------------
                           1050 ; Function bdos_memset
                           1051 ; ---------------------------------
   04B5                    1052 _bdos_memset::
                           1053 ;./bdos.c:575: while(count > 0) {
   04B5 D1            [10] 1054 	pop	de
   04B6 C1            [10] 1055 	pop	bc
   04B7 C5            [11] 1056 	push	bc
   04B8 D5            [11] 1057 	push	de
   04B9 21 05 00      [10] 1058 	ld	hl, #5
   04BC 39            [11] 1059 	add	hl, sp
   04BD 5E            [ 7] 1060 	ld	e, (hl)
   04BE 23            [ 6] 1061 	inc	hl
   04BF 56            [ 7] 1062 	ld	d, (hl)
   04C0                    1063 00101$:
   04C0 7A            [ 4] 1064 	ld	a, d
   04C1 B3            [ 4] 1065 	or	a, e
   04C2 C8            [11] 1066 	ret	Z
                           1067 ;./bdos.c:576: *addr++ = b;
   04C3 21 04 00      [10] 1068 	ld	hl, #4+0
   04C6 39            [11] 1069 	add	hl, sp
   04C7 7E            [ 7] 1070 	ld	a, (hl)
   04C8 02            [ 7] 1071 	ld	(bc), a
   04C9 03            [ 6] 1072 	inc	bc
                           1073 ;./bdos.c:577: count--;
   04CA 1B            [ 6] 1074 	dec	de
                           1075 ;./bdos.c:579: }
   04CB 18 F3         [12] 1076 	jr	00101$
                           1077 ;./bdos.c:853: byte bdos_f_open(struct FCB *fcb) {
                           1078 ;	---------------------------------
                           1079 ; Function bdos_f_open
                           1080 ; ---------------------------------
   04CD                    1081 _bdos_f_open::
                           1082 ;./bdos.c:862: bdos_puts("bdos_f_open n/a");
   04CD 21rD8r04      [10] 1083 	ld	hl, #___str_4
   04D0 E5            [11] 1084 	push	hl
   04D1 CDrD7r03      [17] 1085 	call	_bdos_puts
   04D4 F1            [10] 1086 	pop	af
                           1087 ;./bdos.c:884: return r;
   04D5 2E FF         [ 7] 1088 	ld	l, #0xff
                           1089 ;./bdos.c:885: }
   04D7 C9            [10] 1090 	ret
   04D8                    1091 ___str_4:
   04D8 62 64 6F 73 5F 66  1092 	.ascii "bdos_f_open n/a"
        5F 6F 70 65 6E 20
        6E 2F 61
   04E7 00                 1093 	.db 0x00
                           1094 ;./bdos.c:887: byte bdos_f_close(struct FCB *fcb) {
                           1095 ;	---------------------------------
                           1096 ; Function bdos_f_close
                           1097 ; ---------------------------------
   04E8                    1098 _bdos_f_close::
                           1099 ;./bdos.c:896: bdos_puts("bdos_f_close n/a!");
   04E8 21rF3r04      [10] 1100 	ld	hl, #___str_5
   04EB E5            [11] 1101 	push	hl
   04EC CDrD7r03      [17] 1102 	call	_bdos_puts
   04EF F1            [10] 1103 	pop	af
                           1104 ;./bdos.c:903: return r;
   04F0 2E FF         [ 7] 1105 	ld	l, #0xff
                           1106 ;./bdos.c:904: }
   04F2 C9            [10] 1107 	ret
   04F3                    1108 ___str_5:
   04F3 62 64 6F 73 5F 66  1109 	.ascii "bdos_f_close n/a!"
        5F 63 6C 6F 73 65
        20 6E 2F 61 21
   0504 00                 1110 	.db 0x00
                           1111 ;./bdos.c:906: byte bdos_f_read(struct FCB *fcb) {
                           1112 ;	---------------------------------
                           1113 ; Function bdos_f_read
                           1114 ; ---------------------------------
   0505                    1115 _bdos_f_read::
                           1116 ;./bdos.c:919: bdos_puts("bdos_f_read n/a!");
   0505 21r10r05      [10] 1117 	ld	hl, #___str_6
   0508 E5            [11] 1118 	push	hl
   0509 CDrD7r03      [17] 1119 	call	_bdos_puts
   050C F1            [10] 1120 	pop	af
                           1121 ;./bdos.c:925: return 1;	// 1 = EOF
   050D 2E 01         [ 7] 1122 	ld	l, #0x01
                           1123 ;./bdos.c:948: return 0x00;
                           1124 ;./bdos.c:949: }
   050F C9            [10] 1125 	ret
   0510                    1126 ___str_6:
   0510 62 64 6F 73 5F 66  1127 	.ascii "bdos_f_read n/a!"
        5F 72 65 61 64 20
        6E 2F 61 21
   0520 00                 1128 	.db 0x00
                           1129 ;./bdos.c:951: byte bdos_f_readrand(struct FCB *fcb) {
                           1130 ;	---------------------------------
                           1131 ; Function bdos_f_readrand
                           1132 ; ---------------------------------
   0521                    1133 _bdos_f_readrand::
   0521 DD E5         [15] 1134 	push	ix
   0523 DD 21 00 00   [14] 1135 	ld	ix,#0
   0527 DD 39         [15] 1136 	add	ix,sp
   0529 F5            [11] 1137 	push	af
                           1138 ;./bdos.c:973: rn = (word)fcb->r0 + ((word)fcb->r1 * 256);
   052A DD 4E 04      [19] 1139 	ld	c, 4 (ix)
   052D DD 46 05      [19] 1140 	ld	b, 5 (ix)
   0530 69            [ 4] 1141 	ld	l, c
   0531 60            [ 4] 1142 	ld	h, b
   0532 11 21 00      [10] 1143 	ld	de, #0x0021
   0535 19            [11] 1144 	add	hl, de
   0536 5E            [ 7] 1145 	ld	e, (hl)
   0537 69            [ 4] 1146 	ld	l, c
   0538 60            [ 4] 1147 	ld	h, b
   0539 C5            [11] 1148 	push	bc
   053A 01 22 00      [10] 1149 	ld	bc, #0x0022
   053D 09            [11] 1150 	add	hl, bc
   053E C1            [10] 1151 	pop	bc
   053F 66            [ 7] 1152 	ld	h, (hl)
   0540 2E 00         [ 7] 1153 	ld	l, #0x00
   0542 16 00         [ 7] 1154 	ld	d, #0x00
   0544 19            [11] 1155 	add	hl, de
   0545 EB            [ 4] 1156 	ex	de, hl
                           1157 ;./bdos.c:974: ex = rn / 128;
   0546 6B            [ 4] 1158 	ld	l, e
   0547 62            [ 4] 1159 	ld	h, d
   0548 CB 3C         [ 8] 1160 	srl	h
   054A CB 1D         [ 8] 1161 	rr	l
   054C CB 3C         [ 8] 1162 	srl	h
   054E CB 1D         [ 8] 1163 	rr	l
   0550 CB 3C         [ 8] 1164 	srl	h
   0552 CB 1D         [ 8] 1165 	rr	l
   0554 CB 3C         [ 8] 1166 	srl	h
   0556 CB 1D         [ 8] 1167 	rr	l
   0558 CB 3C         [ 8] 1168 	srl	h
   055A CB 1D         [ 8] 1169 	rr	l
   055C CB 3C         [ 8] 1170 	srl	h
   055E CB 1D         [ 8] 1171 	rr	l
   0560 CB 3C         [ 8] 1172 	srl	h
   0562 CB 1D         [ 8] 1173 	rr	l
   0564 33            [ 6] 1174 	inc	sp
   0565 33            [ 6] 1175 	inc	sp
   0566 E5            [11] 1176 	push	hl
                           1177 ;./bdos.c:975: fcb->cr = rn % 128;
   0567 21 20 00      [10] 1178 	ld	hl, #0x0020
   056A 09            [11] 1179 	add	hl, bc
   056B CB BB         [ 8] 1180 	res	7, e
   056D 73            [ 7] 1181 	ld	(hl), e
                           1182 ;./bdos.c:976: fcb->ex = ex % 32;
   056E 21 0C 00      [10] 1183 	ld	hl, #0x000c
   0571 09            [11] 1184 	add	hl, bc
   0572 D1            [10] 1185 	pop	de
   0573 D5            [11] 1186 	push	de
   0574 7B            [ 4] 1187 	ld	a, e
   0575 E6 1F         [ 7] 1188 	and	a, #0x1f
   0577 DD 77 FE      [19] 1189 	ld	-2 (ix), a
   057A DD 36 FF 00   [19] 1190 	ld	-1 (ix), #0x00
   057E DD 7E FE      [19] 1191 	ld	a, -2 (ix)
   0581 77            [ 7] 1192 	ld	(hl), a
                           1193 ;./bdos.c:977: fcb->s2 = (0x80 | (ex / 32));
   0582 21 0E 00      [10] 1194 	ld	hl, #0x000e
   0585 09            [11] 1195 	add	hl, bc
   0586 CB 3A         [ 8] 1196 	srl	d
   0588 CB 1B         [ 8] 1197 	rr	e
   058A CB 3A         [ 8] 1198 	srl	d
   058C CB 1B         [ 8] 1199 	rr	e
   058E CB 3A         [ 8] 1200 	srl	d
   0590 CB 1B         [ 8] 1201 	rr	e
   0592 CB 3A         [ 8] 1202 	srl	d
   0594 CB 1B         [ 8] 1203 	rr	e
   0596 CB 3A         [ 8] 1204 	srl	d
   0598 CB 1B         [ 8] 1205 	rr	e
   059A CB FB         [ 8] 1206 	set	7, e
   059C 73            [ 7] 1207 	ld	(hl), e
                           1208 ;./bdos.c:980: r = bdos_f_read(fcb);
   059D C5            [11] 1209 	push	bc
   059E CDr05r05      [17] 1210 	call	_bdos_f_read
                           1211 ;./bdos.c:981: return r;
                           1212 ;./bdos.c:982: }
   05A1 DD F9         [10] 1213 	ld	sp,ix
   05A3 DD E1         [14] 1214 	pop	ix
   05A5 C9            [10] 1215 	ret
                           1216 ;./bdos.c:984: byte bdos_f_write(struct FCB *fcb) {
                           1217 ;	---------------------------------
                           1218 ; Function bdos_f_write
                           1219 ; ---------------------------------
   05A6                    1220 _bdos_f_write::
                           1221 ;./bdos.c:991: bdos_puts("bdos_f_write n/a!");
   05A6 21rB1r05      [10] 1222 	ld	hl, #___str_7
   05A9 E5            [11] 1223 	push	hl
   05AA CDrD7r03      [17] 1224 	call	_bdos_puts
   05AD F1            [10] 1225 	pop	af
                           1226 ;./bdos.c:993: return 0xff;
   05AE 2E FF         [ 7] 1227 	ld	l, #0xff
                           1228 ;./bdos.c:996: }
   05B0 C9            [10] 1229 	ret
   05B1                    1230 ___str_7:
   05B1 62 64 6F 73 5F 66  1231 	.ascii "bdos_f_write n/a!"
        5F 77 72 69 74 65
        20 6E 2F 61 21
   05C2 00                 1232 	.db 0x00
                           1233 ;./bdos.c:998: byte bdos_f_writerand(struct FCB *fcb) {
                           1234 ;	---------------------------------
                           1235 ; Function bdos_f_writerand
                           1236 ; ---------------------------------
   05C3                    1237 _bdos_f_writerand::
                           1238 ;./bdos.c:1005: bdos_puts("bdos_f_writerand n/a!");
   05C3 21rCEr05      [10] 1239 	ld	hl, #___str_8
   05C6 E5            [11] 1240 	push	hl
   05C7 CDrD7r03      [17] 1241 	call	_bdos_puts
   05CA F1            [10] 1242 	pop	af
                           1243 ;./bdos.c:1007: return 0xff;
   05CB 2E FF         [ 7] 1244 	ld	l, #0xff
                           1245 ;./bdos.c:1009: }
   05CD C9            [10] 1246 	ret
   05CE                    1247 ___str_8:
   05CE 62 64 6F 73 5F 66  1248 	.ascii "bdos_f_writerand n/a!"
        5F 77 72 69 74 65
        72 61 6E 64 20 6E
        2F 61 21
   05E3 00                 1249 	.db 0x00
                           1250 ;./bdos.c:1027: byte bdos_f_sfirst(struct FCB *fcb) {
                           1251 ;	---------------------------------
                           1252 ; Function bdos_f_sfirst
                           1253 ; ---------------------------------
   05E4                    1254 _bdos_f_sfirst::
                           1255 ;./bdos.c:1033: bdos_puts("bdos_f_sfirst n/a!");
   05E4 21rEFr05      [10] 1256 	ld	hl, #___str_9
   05E7 E5            [11] 1257 	push	hl
   05E8 CDrD7r03      [17] 1258 	call	_bdos_puts
   05EB F1            [10] 1259 	pop	af
                           1260 ;./bdos.c:1035: return 0xff;
   05EC 2E FF         [ 7] 1261 	ld	l, #0xff
                           1262 ;./bdos.c:1037: }
   05EE C9            [10] 1263 	ret
   05EF                    1264 ___str_9:
   05EF 62 64 6F 73 5F 66  1265 	.ascii "bdos_f_sfirst n/a!"
        5F 73 66 69 72 73
        74 20 6E 2F 61 21
   0601 00                 1266 	.db 0x00
                           1267 ;./bdos.c:1038: byte bdos_f_snext(struct FCB *fcb) {
                           1268 ;	---------------------------------
                           1269 ; Function bdos_f_snext
                           1270 ; ---------------------------------
   0602                    1271 _bdos_f_snext::
                           1272 ;./bdos.c:1044: bdos_puts("bdos_f_snext n/a!");
   0602 21r0Dr06      [10] 1273 	ld	hl, #___str_10
   0605 E5            [11] 1274 	push	hl
   0606 CDrD7r03      [17] 1275 	call	_bdos_puts
   0609 F1            [10] 1276 	pop	af
                           1277 ;./bdos.c:1046: return 0xff;
   060A 2E FF         [ 7] 1278 	ld	l, #0xff
                           1279 ;./bdos.c:1048: }
   060C C9            [10] 1280 	ret
   060D                    1281 ___str_10:
   060D 62 64 6F 73 5F 66  1282 	.ascii "bdos_f_snext n/a!"
        5F 73 6E 65 78 74
        20 6E 2F 61 21
   061E 00                 1283 	.db 0x00
                           1284 ;./bdos.c:1052: void bdos_init() __naked {
                           1285 ;	---------------------------------
                           1286 ; Function bdos_init
                           1287 ; ---------------------------------
   061F                    1288 _bdos_init::
                           1289 ;./bdos.c:1057: bdos_delimiter = '$';
   061F 21r00r00      [10] 1290 	ld	hl,#_bdos_delimiter + 0
   0622 36 24         [10] 1291 	ld	(hl), #0x24
                           1292 ;./bdos.c:1058: bdos_user = 1;
   0624 21r01r00      [10] 1293 	ld	hl,#_bdos_user + 0
   0627 36 01         [10] 1294 	ld	(hl), #0x01
                           1295 ;./bdos.c:1060: bdos_memset((byte *)bdos_fcb, 0x00, 36);	//sizeof(FCB));
   0629 01 5C 00      [10] 1296 	ld	bc, #_bdos_fcb+0
   062C 21 24 00      [10] 1297 	ld	hl, #0x0024
   062F E5            [11] 1298 	push	hl
   0630 AF            [ 4] 1299 	xor	a, a
   0631 F5            [11] 1300 	push	af
   0632 33            [ 6] 1301 	inc	sp
   0633 C5            [11] 1302 	push	bc
   0634 CDrB5r04      [17] 1303 	call	_bdos_memset
   0637 F1            [10] 1304 	pop	af
                           1305 ;./bdos.c:1079: bdos_puts("Must load CCP now (n/a)");
   0638 33            [ 6] 1306 	inc	sp
   0639 21r69r06      [10] 1307 	ld	hl,#___str_11
   063C E3            [19] 1308 	ex	(sp),hl
   063D CDrD7r03      [17] 1309 	call	_bdos_puts
   0640 F1            [10] 1310 	pop	af
                           1311 ;./bdos.c:1080: bdos_getchar();
   0641 C3rD4r03      [10] 1312 	jp	_bdos_getchar
                           1313 ;./bdos.c:1082: }
                           1314 ;../../include/driver/hd44780.h:169: void lcd_delay_long() __naked {
                           1315 ;	---------------------------------
                           1316 ; Function lcd_delay_long
                           1317 ; ---------------------------------
   0644                    1318 _lcd_delay_long::
                           1319 ;../../include/driver/hd44780.h:181: __endasm;
                           1320 ;	Used for screen functions (after putting stuff to ports 0x0a or 0x0b)
   0644 E5            [11] 1321 	push	hl
   0645 21 FF 1F      [10] 1322 	ld	hl, #0x1fff
   0648                    1323 	_delay_1fff_loop:
   0648 2D            [ 4] 1324 	dec	l
   0649 20 FD         [12] 1325 	jr	nz, _delay_1fff_loop
   064B 25            [ 4] 1326 	dec	h
   064C 20 FA         [12] 1327 	jr	nz, _delay_1fff_loop
   064E E1            [10] 1328 	pop	hl
   064F C9            [10] 1329 	ret
                           1330 ;../../include/driver/hd44780.h:182: }
                           1331 ;../../include/driver/hd44780.h:185: void lcd_delay_short() __naked {
                           1332 ;	---------------------------------
                           1333 ; Function lcd_delay_short
                           1334 ; ---------------------------------
   0650                    1335 _lcd_delay_short::
                           1336 ;../../include/driver/hd44780.h:197: __endasm;
                           1337 ;	Used for screen functions (after putting stuff to ports 0x0a or 0x0b)
   0650 E5            [11] 1338 	push	hl
   0651 21 0F 01      [10] 1339 	ld	hl, #0x010f
   0654                    1340 	_delay_010f_loop:
   0654 2D            [ 4] 1341 	dec	l
   0655 20 FD         [12] 1342 	jr	nz, _delay_010f_loop
   0657 25            [ 4] 1343 	dec	h
   0658 20 FA         [12] 1344 	jr	nz, _delay_010f_loop
   065A E1            [10] 1345 	pop	hl
   065B C9            [10] 1346 	ret
                           1347 ;../../include/driver/hd44780.h:198: }
                           1348 ;../../include/driver/hd44780.h:201: void lcd_writeControl(byte a) {
                           1349 ;	---------------------------------
                           1350 ; Function lcd_writeControl
                           1351 ; ---------------------------------
   065C                    1352 _lcd_writeControl::
                           1353 ;../../include/driver/hd44780.h:202: lcd_controlPort = a;	// Output value to LCD control port
   065C 21 02 00      [10] 1354 	ld	hl, #2+0
   065F 39            [11] 1355 	add	hl, sp
   0660 7E            [ 7] 1356 	ld	a, (hl)
   0661 D3 0A         [11] 1357 	out	(_lcd_controlPort), a
                           1358 ;../../include/driver/hd44780.h:205: lcd_delay_short();
   0663 CDr50r06      [17] 1359 	call	_lcd_delay_short
                           1360 ;../../include/driver/hd44780.h:206: lcd_delay_short();
                           1361 ;../../include/driver/hd44780.h:207: }
   0666 C3r50r06      [10] 1362 	jp	_lcd_delay_short
   0669                    1363 ___str_11:
   0669 4D 75 73 74 20 6C  1364 	.ascii "Must load CCP now (n/a)"
        6F 61 64 20 43 43
        50 20 6E 6F 77 20
        28 6E 2F 61 29
   0680 00                 1365 	.db 0x00
   0681                    1366 _lcd_map_4rows:
   0681 00                 1367 	.db #0x00	; 0
   0682 01                 1368 	.db #0x01	; 1
   0683 02                 1369 	.db #0x02	; 2
   0684 03                 1370 	.db #0x03	; 3
   0685 08                 1371 	.db #0x08	; 8
   0686 09                 1372 	.db #0x09	; 9
   0687 0A                 1373 	.db #0x0a	; 10
   0688 0B                 1374 	.db #0x0b	; 11
   0689 0C                 1375 	.db #0x0c	; 12
   068A 0D                 1376 	.db #0x0d	; 13
   068B 0E                 1377 	.db #0x0e	; 14
   068C 0F                 1378 	.db #0x0f	; 15
   068D 18                 1379 	.db #0x18	; 24
   068E 19                 1380 	.db #0x19	; 25
   068F 1A                 1381 	.db #0x1a	; 26
   0690 1B                 1382 	.db #0x1b	; 27
   0691 1C                 1383 	.db #0x1c	; 28
   0692 1D                 1384 	.db #0x1d	; 29
   0693 1E                 1385 	.db #0x1e	; 30
   0694 1F                 1386 	.db #0x1f	; 31
   0695 40                 1387 	.db #0x40	; 64
   0696 41                 1388 	.db #0x41	; 65	'A'
   0697 42                 1389 	.db #0x42	; 66	'B'
   0698 43                 1390 	.db #0x43	; 67	'C'
   0699 48                 1391 	.db #0x48	; 72	'H'
   069A 49                 1392 	.db #0x49	; 73	'I'
   069B 4A                 1393 	.db #0x4a	; 74	'J'
   069C 4B                 1394 	.db #0x4b	; 75	'K'
   069D 4C                 1395 	.db #0x4c	; 76	'L'
   069E 4D                 1396 	.db #0x4d	; 77	'M'
   069F 4E                 1397 	.db #0x4e	; 78	'N'
   06A0 4F                 1398 	.db #0x4f	; 79	'O'
   06A1 58                 1399 	.db #0x58	; 88	'X'
   06A2 59                 1400 	.db #0x59	; 89	'Y'
   06A3 5A                 1401 	.db #0x5a	; 90	'Z'
   06A4 5B                 1402 	.db #0x5b	; 91
   06A5 5C                 1403 	.db #0x5c	; 92
   06A6 5D                 1404 	.db #0x5d	; 93
   06A7 5E                 1405 	.db #0x5e	; 94
   06A8 5F                 1406 	.db #0x5f	; 95
   06A9 04                 1407 	.db #0x04	; 4
   06AA 05                 1408 	.db #0x05	; 5
   06AB 06                 1409 	.db #0x06	; 6
   06AC 07                 1410 	.db #0x07	; 7
   06AD 10                 1411 	.db #0x10	; 16
   06AE 11                 1412 	.db #0x11	; 17
   06AF 12                 1413 	.db #0x12	; 18
   06B0 13                 1414 	.db #0x13	; 19
   06B1 14                 1415 	.db #0x14	; 20
   06B2 15                 1416 	.db #0x15	; 21
   06B3 16                 1417 	.db #0x16	; 22
   06B4 17                 1418 	.db #0x17	; 23
   06B5 20                 1419 	.db #0x20	; 32
   06B6 21                 1420 	.db #0x21	; 33
   06B7 22                 1421 	.db #0x22	; 34
   06B8 23                 1422 	.db #0x23	; 35
   06B9 24                 1423 	.db #0x24	; 36
   06BA 25                 1424 	.db #0x25	; 37
   06BB 26                 1425 	.db #0x26	; 38
   06BC 27                 1426 	.db #0x27	; 39
   06BD 44                 1427 	.db #0x44	; 68	'D'
   06BE 45                 1428 	.db #0x45	; 69	'E'
   06BF 46                 1429 	.db #0x46	; 70	'F'
   06C0 47                 1430 	.db #0x47	; 71	'G'
   06C1 50                 1431 	.db #0x50	; 80	'P'
   06C2 51                 1432 	.db #0x51	; 81	'Q'
   06C3 52                 1433 	.db #0x52	; 82	'R'
   06C4 53                 1434 	.db #0x53	; 83	'S'
   06C5 54                 1435 	.db #0x54	; 84	'T'
   06C6 55                 1436 	.db #0x55	; 85	'U'
   06C7 56                 1437 	.db #0x56	; 86	'V'
   06C8 57                 1438 	.db #0x57	; 87	'W'
   06C9 60                 1439 	.db #0x60	; 96
   06CA 61                 1440 	.db #0x61	; 97	'a'
   06CB 62                 1441 	.db #0x62	; 98	'b'
   06CC 63                 1442 	.db #0x63	; 99	'c'
   06CD 64                 1443 	.db #0x64	; 100	'd'
   06CE 65                 1444 	.db #0x65	; 101	'e'
   06CF 66                 1445 	.db #0x66	; 102	'f'
   06D0 67                 1446 	.db #0x67	; 103	'g'
   06D1 67                 1447 	.db #0x67	; 103	'g'
                           1448 ;../../include/driver/hd44780.h:209: void lcd_writeData(byte a) {
                           1449 ;	---------------------------------
                           1450 ; Function lcd_writeData
                           1451 ; ---------------------------------
   06D2                    1452 _lcd_writeData::
                           1453 ;../../include/driver/hd44780.h:210: lcd_dataPort = a;	// Output value to LCD data port
   06D2 FD 21 02 00   [14] 1454 	ld	iy, #2
   06D6 FD 39         [15] 1455 	add	iy, sp
   06D8 FD 7E 00      [19] 1456 	ld	a, 0 (iy)
   06DB D3 0B         [11] 1457 	out	(_lcd_dataPort), a
                           1458 ;../../include/driver/hd44780.h:214: lcd_delay_short();
                           1459 ;../../include/driver/hd44780.h:215: }
   06DD C3r50r06      [10] 1460 	jp	_lcd_delay_short
                           1461 ;../../include/driver/hd44780.h:231: void lcd_set_cursor() {
                           1462 ;	---------------------------------
                           1463 ; Function lcd_set_cursor
                           1464 ; ---------------------------------
   06E0                    1465 _lcd_set_cursor::
                           1466 ;../../include/driver/hd44780.h:235: o = lcd_x + (lcd_y * LCD_COLS);
   06E0 3Ar01r00      [13] 1467 	ld	a,(#_lcd_y + 0)
   06E3 4F            [ 4] 1468 	ld	c, a
   06E4 87            [ 4] 1469 	add	a, a
   06E5 87            [ 4] 1470 	add	a, a
   06E6 81            [ 4] 1471 	add	a, c
   06E7 87            [ 4] 1472 	add	a, a
   06E8 87            [ 4] 1473 	add	a, a
   06E9 21r00r00      [10] 1474 	ld	hl,#_lcd_x + 0
   06EC 4E            [ 7] 1475 	ld	c, (hl)
   06ED 81            [ 4] 1476 	add	a, c
   06EE 5F            [ 4] 1477 	ld	e, a
                           1478 ;../../include/driver/hd44780.h:236: lcd_writeControl(LCD_SETDDRAMADDR | lcd_map[o]);
   06EF 21r81r06      [10] 1479 	ld	hl, #_lcd_map_4rows+0
   06F2 16 00         [ 7] 1480 	ld	d, #0x00
   06F4 19            [11] 1481 	add	hl, de
   06F5 7E            [ 7] 1482 	ld	a, (hl)
   06F6 CB FF         [ 8] 1483 	set	7, a
   06F8 F5            [11] 1484 	push	af
   06F9 33            [ 6] 1485 	inc	sp
   06FA CDr5Cr06      [17] 1486 	call	_lcd_writeControl
   06FD 33            [ 6] 1487 	inc	sp
                           1488 ;../../include/driver/hd44780.h:238: if (lcd_cursor) lcd_writeControl(LCD_DISPLAYCONTROL | LCD_DISPLAYON | LCD_CURSORON | LCD_BLINKON);
   06FE 3Ar02r00      [13] 1489 	ld	a,(#_lcd_cursor + 0)
   0701 B7            [ 4] 1490 	or	a, a
   0702 C8            [11] 1491 	ret	Z
   0703 3E 0F         [ 7] 1492 	ld	a, #0x0f
   0705 F5            [11] 1493 	push	af
   0706 33            [ 6] 1494 	inc	sp
   0707 CDr5Cr06      [17] 1495 	call	_lcd_writeControl
   070A 33            [ 6] 1496 	inc	sp
                           1497 ;../../include/driver/hd44780.h:239: }
   070B C9            [10] 1498 	ret
                           1499 ;../../include/driver/hd44780.h:242: void lcd_clear() {
                           1500 ;	---------------------------------
                           1501 ; Function lcd_clear
                           1502 ; ---------------------------------
   070C                    1503 _lcd_clear::
                           1504 ;../../include/driver/hd44780.h:247: lcd_writeControl(LCD_CLEARDISPLAY);
   070C 3E 01         [ 7] 1505 	ld	a, #0x01
   070E F5            [11] 1506 	push	af
   070F 33            [ 6] 1507 	inc	sp
   0710 CDr5Cr06      [17] 1508 	call	_lcd_writeControl
   0713 33            [ 6] 1509 	inc	sp
                           1510 ;../../include/driver/hd44780.h:249: lcd_writeControl(LCD_RETURNHOME);
   0714 3E 02         [ 7] 1511 	ld	a, #0x02
   0716 F5            [11] 1512 	push	af
   0717 33            [ 6] 1513 	inc	sp
   0718 CDr5Cr06      [17] 1514 	call	_lcd_writeControl
   071B 33            [ 6] 1515 	inc	sp
                           1516 ;../../include/driver/hd44780.h:250: lcd_delay_long();
   071C CDr44r06      [17] 1517 	call	_lcd_delay_long
                           1518 ;../../include/driver/hd44780.h:252: lcd_x = 0;
   071F 21r00r00      [10] 1519 	ld	hl,#_lcd_x + 0
   0722 36 00         [10] 1520 	ld	(hl), #0x00
                           1521 ;../../include/driver/hd44780.h:253: lcd_y = 0;
   0724 FD 21r01r00   [14] 1522 	ld	iy, #_lcd_y
   0728 FD 36 00 00   [19] 1523 	ld	0 (iy), #0x00
                           1524 ;../../include/driver/hd44780.h:257: for(i = 0; i < (LCD_COLS * LCD_ROWS); i++) {
   072C 01r10r00      [10] 1525 	ld	bc, #_lcd_buffer+0
   072F 1E 00         [ 7] 1526 	ld	e, #0x00
   0731                    1527 00102$:
                           1528 ;../../include/driver/hd44780.h:258: lcd_buffer[i] = 0x20;
   0731 6B            [ 4] 1529 	ld	l, e
   0732 26 00         [ 7] 1530 	ld	h, #0x00
   0734 09            [11] 1531 	add	hl, bc
   0735 36 20         [10] 1532 	ld	(hl), #0x20
                           1533 ;../../include/driver/hd44780.h:257: for(i = 0; i < (LCD_COLS * LCD_ROWS); i++) {
   0737 1C            [ 4] 1534 	inc	e
   0738 7B            [ 4] 1535 	ld	a, e
   0739 D6 50         [ 7] 1536 	sub	a, #0x50
   073B 38 F4         [12] 1537 	jr	C,00102$
                           1538 ;../../include/driver/hd44780.h:261: lcd_set_cursor();
                           1539 ;../../include/driver/hd44780.h:263: }
   073D C3rE0r06      [10] 1540 	jp	_lcd_set_cursor
                           1541 ;../../include/driver/hd44780.h:266: void lcd_init() {
                           1542 ;	---------------------------------
                           1543 ; Function lcd_init
                           1544 ; ---------------------------------
   0740                    1545 _lcd_init::
                           1546 ;../../include/driver/hd44780.h:273: lcd_writeControl(0x38);	//Function set: 2 Line, 8-bit, 5x7 dots
   0740 3E 38         [ 7] 1547 	ld	a, #0x38
   0742 F5            [11] 1548 	push	af
   0743 33            [ 6] 1549 	inc	sp
   0744 CDr5Cr06      [17] 1550 	call	_lcd_writeControl
   0747 33            [ 6] 1551 	inc	sp
                           1552 ;../../include/driver/hd44780.h:274: lcd_writeControl(0x38);
   0748 3E 38         [ 7] 1553 	ld	a, #0x38
   074A F5            [11] 1554 	push	af
   074B 33            [ 6] 1555 	inc	sp
   074C CDr5Cr06      [17] 1556 	call	_lcd_writeControl
   074F 33            [ 6] 1557 	inc	sp
                           1558 ;../../include/driver/hd44780.h:275: lcd_writeControl(0x38);
   0750 3E 38         [ 7] 1559 	ld	a, #0x38
   0752 F5            [11] 1560 	push	af
   0753 33            [ 6] 1561 	inc	sp
   0754 CDr5Cr06      [17] 1562 	call	_lcd_writeControl
   0757 33            [ 6] 1563 	inc	sp
                           1564 ;../../include/driver/hd44780.h:276: lcd_writeControl(0x38);
   0758 3E 38         [ 7] 1565 	ld	a, #0x38
   075A F5            [11] 1566 	push	af
   075B 33            [ 6] 1567 	inc	sp
   075C CDr5Cr06      [17] 1568 	call	_lcd_writeControl
   075F 33            [ 6] 1569 	inc	sp
                           1570 ;../../include/driver/hd44780.h:279: lcd_writeControl(LCD_CLEARDISPLAY);
   0760 3E 01         [ 7] 1571 	ld	a, #0x01
   0762 F5            [11] 1572 	push	af
   0763 33            [ 6] 1573 	inc	sp
   0764 CDr5Cr06      [17] 1574 	call	_lcd_writeControl
   0767 33            [ 6] 1575 	inc	sp
                           1576 ;../../include/driver/hd44780.h:285: lcd_writeControl(LCD_DISPLAYCONTROL | LCD_DISPLAYON | LCD_CURSORON | LCD_BLINKON);
   0768 3E 0F         [ 7] 1577 	ld	a, #0x0f
   076A F5            [11] 1578 	push	af
   076B 33            [ 6] 1579 	inc	sp
   076C CDr5Cr06      [17] 1580 	call	_lcd_writeControl
   076F 33            [ 6] 1581 	inc	sp
                           1582 ;../../include/driver/hd44780.h:287: lcd_writeControl(LCD_ENTRYMODESET | LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT );
   0770 3E 06         [ 7] 1583 	ld	a, #0x06
   0772 F5            [11] 1584 	push	af
   0773 33            [ 6] 1585 	inc	sp
   0774 CDr5Cr06      [17] 1586 	call	_lcd_writeControl
   0777 33            [ 6] 1587 	inc	sp
                           1588 ;../../include/driver/hd44780.h:298: lcd_cursor = 1;
   0778 FD 21r02r00   [14] 1589 	ld	iy, #_lcd_cursor
   077C FD 36 00 01   [19] 1590 	ld	0 (iy), #0x01
                           1591 ;../../include/driver/hd44780.h:299: lcd_scroll_cb = 0;
   0780 21 00 00      [10] 1592 	ld	hl, #0x0000
   0783 22r60r00      [16] 1593 	ld	(_lcd_scroll_cb), hl
                           1594 ;../../include/driver/hd44780.h:302: lcd_clear();
                           1595 ;../../include/driver/hd44780.h:319: }
   0786 C3r0Cr07      [10] 1596 	jp	_lcd_clear
                           1597 ;../../include/driver/hd44780.h:323: void lcd_refresh() {
                           1598 ;	---------------------------------
                           1599 ; Function lcd_refresh
                           1600 ; ---------------------------------
   0789                    1601 _lcd_refresh::
                           1602 ;../../include/driver/hd44780.h:329: lcd_writeControl(LCD_DISPLAYCONTROL | LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF);
   0789 3E 0C         [ 7] 1603 	ld	a, #0x0c
   078B F5            [11] 1604 	push	af
   078C 33            [ 6] 1605 	inc	sp
   078D CDr5Cr06      [17] 1606 	call	_lcd_writeControl
   0790 33            [ 6] 1607 	inc	sp
                           1608 ;../../include/driver/hd44780.h:331: p0 = &lcd_buffer[0];
   0791 01r10r00      [10] 1609 	ld	bc, #_lcd_buffer+0
                           1610 ;../../include/driver/hd44780.h:333: for(i = 0; i < (LCD_COLS * LCD_ROWS); i++) {
   0794 11 00 00      [10] 1611 	ld	de, #0x0000
   0797                    1612 00102$:
                           1613 ;../../include/driver/hd44780.h:334: lcd_writeControl(LCD_SETDDRAMADDR | lcd_map[o]);
   0797 3Er81         [ 7] 1614 	ld	a, #<(_lcd_map_4rows)
   0799 83            [ 4] 1615 	add	a, e
   079A 6F            [ 4] 1616 	ld	l, a
   079B 3Es06         [ 7] 1617 	ld	a, #>(_lcd_map_4rows)
   079D CE 00         [ 7] 1618 	adc	a, #0x00
   079F 67            [ 4] 1619 	ld	h, a
   07A0 7E            [ 7] 1620 	ld	a, (hl)
   07A1 CB FF         [ 8] 1621 	set	7, a
   07A3 C5            [11] 1622 	push	bc
   07A4 D5            [11] 1623 	push	de
   07A5 F5            [11] 1624 	push	af
   07A6 33            [ 6] 1625 	inc	sp
   07A7 CDr5Cr06      [17] 1626 	call	_lcd_writeControl
   07AA 33            [ 6] 1627 	inc	sp
   07AB D1            [10] 1628 	pop	de
   07AC C1            [10] 1629 	pop	bc
                           1630 ;../../include/driver/hd44780.h:335: lcd_writeData(*p0++);
   07AD 0A            [ 7] 1631 	ld	a, (bc)
   07AE 03            [ 6] 1632 	inc	bc
   07AF C5            [11] 1633 	push	bc
   07B0 D5            [11] 1634 	push	de
   07B1 F5            [11] 1635 	push	af
   07B2 33            [ 6] 1636 	inc	sp
   07B3 CDrD2r06      [17] 1637 	call	_lcd_writeData
   07B6 33            [ 6] 1638 	inc	sp
   07B7 D1            [10] 1639 	pop	de
   07B8 C1            [10] 1640 	pop	bc
                           1641 ;../../include/driver/hd44780.h:336: o++;
   07B9 1C            [ 4] 1642 	inc	e
                           1643 ;../../include/driver/hd44780.h:333: for(i = 0; i < (LCD_COLS * LCD_ROWS); i++) {
   07BA 14            [ 4] 1644 	inc	d
   07BB 7A            [ 4] 1645 	ld	a, d
   07BC D6 50         [ 7] 1646 	sub	a, #0x50
   07BE 38 D7         [12] 1647 	jr	C,00102$
                           1648 ;../../include/driver/hd44780.h:339: lcd_set_cursor();
   07C0 CDrE0r06      [17] 1649 	call	_lcd_set_cursor
                           1650 ;../../include/driver/hd44780.h:341: lcd_delay_long();
                           1651 ;../../include/driver/hd44780.h:342: }
   07C3 C3r44r06      [10] 1652 	jp	_lcd_delay_long
                           1653 ;../../include/driver/hd44780.h:345: void lcd_scroll() {
                           1654 ;	---------------------------------
                           1655 ; Function lcd_scroll
                           1656 ; ---------------------------------
   07C6                    1657 _lcd_scroll::
   07C6 DD E5         [15] 1658 	push	ix
   07C8 DD 21 00 00   [14] 1659 	ld	ix,#0
   07CC DD 39         [15] 1660 	add	ix,sp
   07CE 3B            [ 6] 1661 	dec	sp
                           1662 ;../../include/driver/hd44780.h:364: p0 = &lcd_buffer[0];
   07CF 01r10r00      [10] 1663 	ld	bc, #_lcd_buffer
                           1664 ;../../include/driver/hd44780.h:369: p1 = &lcd_buffer[LCD_COLS];
   07D2 11r24r00      [10] 1665 	ld	de, #_lcd_buffer + 20
                           1666 ;../../include/driver/hd44780.h:370: for(i = 0; i < (LCD_COLS * (LCD_ROWS-1)); i++) {
   07D5 AF            [ 4] 1667 	xor	a, a
   07D6 DD 77 FF      [19] 1668 	ld	-1 (ix), a
   07D9                    1669 00103$:
                           1670 ;../../include/driver/hd44780.h:371: *p0++ = *p1++;
   07D9 1A            [ 7] 1671 	ld	a, (de)
   07DA 13            [ 6] 1672 	inc	de
   07DB 02            [ 7] 1673 	ld	(bc), a
   07DC 03            [ 6] 1674 	inc	bc
                           1675 ;../../include/driver/hd44780.h:370: for(i = 0; i < (LCD_COLS * (LCD_ROWS-1)); i++) {
   07DD DD 34 FF      [23] 1676 	inc	-1 (ix)
   07E0 DD 7E FF      [19] 1677 	ld	a, -1 (ix)
   07E3 D6 3C         [ 7] 1678 	sub	a, #0x3c
   07E5 38 F2         [12] 1679 	jr	C,00103$
                           1680 ;../../include/driver/hd44780.h:377: for(i = 0; i < LCD_COLS; i++) {
   07E7 1E 14         [ 7] 1681 	ld	e, #0x14
   07E9                    1682 00107$:
                           1683 ;../../include/driver/hd44780.h:378: *p0++ = 0x20;	// Fill with spaces
   07E9 3E 20         [ 7] 1684 	ld	a, #0x20
   07EB 02            [ 7] 1685 	ld	(bc), a
   07EC 03            [ 6] 1686 	inc	bc
                           1687 ;../../include/driver/hd44780.h:377: for(i = 0; i < LCD_COLS; i++) {
   07ED 1D            [ 4] 1688 	dec	e
   07EE 20 F9         [12] 1689 	jr	NZ,00107$
                           1690 ;../../include/driver/hd44780.h:381: lcd_refresh();
   07F0 CDr89r07      [17] 1691 	call	_lcd_refresh
                           1692 ;../../include/driver/hd44780.h:382: }
   07F3 33            [ 6] 1693 	inc	sp
   07F4 DD E1         [14] 1694 	pop	ix
   07F6 C9            [10] 1695 	ret
                           1696 ;../../include/driver/hd44780.h:395: void lcd_putchar_at(byte x, byte y, char c) {
                           1697 ;	---------------------------------
                           1698 ; Function lcd_putchar_at
                           1699 ; ---------------------------------
   07F7                    1700 _lcd_putchar_at::
                           1701 ;../../include/driver/hd44780.h:399: o = x + (y * LCD_COLS);
   07F7 FD 21 03 00   [14] 1702 	ld	iy, #3
   07FB FD 39         [15] 1703 	add	iy, sp
   07FD FD 7E 00      [19] 1704 	ld	a, 0 (iy)
   0800 4F            [ 4] 1705 	ld	c, a
   0801 87            [ 4] 1706 	add	a, a
   0802 87            [ 4] 1707 	add	a, a
   0803 81            [ 4] 1708 	add	a, c
   0804 87            [ 4] 1709 	add	a, a
   0805 87            [ 4] 1710 	add	a, a
   0806 FD 2B         [10] 1711 	dec	iy
   0808 FD 4E 00      [19] 1712 	ld	c, 0 (iy)
   080B 81            [ 4] 1713 	add	a, c
   080C 5F            [ 4] 1714 	ld	e, a
                           1715 ;../../include/driver/hd44780.h:402: lcd_writeControl(LCD_SETDDRAMADDR | lcd_map[o]);
   080D 21r81r06      [10] 1716 	ld	hl, #_lcd_map_4rows+0
   0810 16 00         [ 7] 1717 	ld	d, #0x00
   0812 19            [11] 1718 	add	hl, de
   0813 7E            [ 7] 1719 	ld	a, (hl)
   0814 CB FF         [ 8] 1720 	set	7, a
   0816 F5            [11] 1721 	push	af
   0817 33            [ 6] 1722 	inc	sp
   0818 CDr5Cr06      [17] 1723 	call	_lcd_writeControl
   081B 33            [ 6] 1724 	inc	sp
                           1725 ;../../include/driver/hd44780.h:405: lcd_writeData(c);
   081C 21 04 00      [10] 1726 	ld	hl, #4+0
   081F 39            [11] 1727 	add	hl, sp
   0820 7E            [ 7] 1728 	ld	a, (hl)
   0821 F5            [11] 1729 	push	af
   0822 33            [ 6] 1730 	inc	sp
   0823 CDrD2r06      [17] 1731 	call	_lcd_writeData
   0826 33            [ 6] 1732 	inc	sp
                           1733 ;../../include/driver/hd44780.h:415: }
   0827 C9            [10] 1734 	ret
                           1735 ;../../include/driver/hd44780.h:417: void lcd_putchar(byte c) {
                           1736 ;	---------------------------------
                           1737 ; Function lcd_putchar
                           1738 ; ---------------------------------
   0828                    1739 _lcd_putchar::
   0828 DD E5         [15] 1740 	push	ix
   082A DD 21 00 00   [14] 1741 	ld	ix,#0
   082E DD 39         [15] 1742 	add	ix,sp
                           1743 ;../../include/driver/hd44780.h:420: if (c == '\r') {
   0830 DD 7E 04      [19] 1744 	ld	a, 4 (ix)
   0833 D6 0D         [ 7] 1745 	sub	a, #0x0d
   0835 20 0B         [12] 1746 	jr	NZ,00109$
                           1747 ;../../include/driver/hd44780.h:422: lcd_x = 0;
   0837 21r00r00      [10] 1748 	ld	hl,#_lcd_x + 0
   083A 36 00         [10] 1749 	ld	(hl), #0x00
                           1750 ;../../include/driver/hd44780.h:423: c = 0;
   083C AF            [ 4] 1751 	xor	a, a
   083D DD 77 04      [19] 1752 	ld	4 (ix), a
   0840 18 2E         [12] 1753 	jr	00110$
   0842                    1754 00109$:
                           1755 ;../../include/driver/hd44780.h:426: if (c == '\n') {
   0842 DD 7E 04      [19] 1756 	ld	a, 4 (ix)
   0845 D6 0A         [ 7] 1757 	sub	a, #0x0a
   0847 20 0F         [12] 1758 	jr	NZ,00106$
                           1759 ;../../include/driver/hd44780.h:428: lcd_x = 0;
   0849 21r00r00      [10] 1760 	ld	hl,#_lcd_x + 0
   084C 36 00         [10] 1761 	ld	(hl), #0x00
                           1762 ;../../include/driver/hd44780.h:429: lcd_y++;
   084E 21r01r00      [10] 1763 	ld	hl, #_lcd_y+0
   0851 34            [11] 1764 	inc	(hl)
                           1765 ;../../include/driver/hd44780.h:430: c = 0;
   0852 AF            [ 4] 1766 	xor	a, a
   0853 DD 77 04      [19] 1767 	ld	4 (ix), a
   0856 18 18         [12] 1768 	jr	00110$
   0858                    1769 00106$:
                           1770 ;../../include/driver/hd44780.h:433: if (c == 8) {
   0858 DD 7E 04      [19] 1771 	ld	a, 4 (ix)
   085B D6 08         [ 7] 1772 	sub	a, #0x08
   085D 20 11         [12] 1773 	jr	NZ,00110$
                           1774 ;../../include/driver/hd44780.h:435: if (lcd_x > 0) lcd_x--;
   085F FD 21r00r00   [14] 1775 	ld	iy, #_lcd_x
   0863 FD 7E 00      [19] 1776 	ld	a, 0 (iy)
   0866 B7            [ 4] 1777 	or	a, a
   0867 28 03         [12] 1778 	jr	Z,00102$
   0869 FD 35 00      [23] 1779 	dec	0 (iy)
   086C                    1780 00102$:
                           1781 ;../../include/driver/hd44780.h:436: c = 0;
   086C AF            [ 4] 1782 	xor	a, a
   086D DD 77 04      [19] 1783 	ld	4 (ix), a
   0870                    1784 00110$:
                           1785 ;../../include/driver/hd44780.h:440: if (lcd_x >= LCD_COLS) {
   0870 FD 21r00r00   [14] 1786 	ld	iy, #_lcd_x
   0874 FD 7E 00      [19] 1787 	ld	a, 0 (iy)
   0877 D6 14         [ 7] 1788 	sub	a, #0x14
   0879 38 08         [12] 1789 	jr	C,00112$
                           1790 ;../../include/driver/hd44780.h:441: lcd_x = 0;
   087B FD 36 00 00   [19] 1791 	ld	0 (iy), #0x00
                           1792 ;../../include/driver/hd44780.h:442: lcd_y++;
   087F 21r01r00      [10] 1793 	ld	hl, #_lcd_y+0
   0882 34            [11] 1794 	inc	(hl)
   0883                    1795 00112$:
                           1796 ;../../include/driver/hd44780.h:445: if (lcd_y >= LCD_ROWS) {
   0883 3Ar01r00      [13] 1797 	ld	a,(#_lcd_y + 0)
   0886 D6 04         [ 7] 1798 	sub	a, #0x04
   0888 38 27         [12] 1799 	jr	C,00120$
                           1800 ;../../include/driver/hd44780.h:448: if (lcd_scroll_cb != 0)
   088A FD 21r60r00   [14] 1801 	ld	iy, #_lcd_scroll_cb
   088E FD 7E 01      [19] 1802 	ld	a, 1 (iy)
   0891 FD B6 00      [19] 1803 	or	a, 0 (iy)
   0894 28 08         [12] 1804 	jr	Z,00113$
                           1805 ;../../include/driver/hd44780.h:449: (*lcd_scroll_cb)();
   0896 2Ar60r00      [16] 1806 	ld	hl, (_lcd_scroll_cb)
   0899 CDr00r00      [17] 1807 	call	___sdcc_call_hl
   089C 18 13         [12] 1808 	jr	00120$
                           1809 ;../../include/driver/hd44780.h:451: while(lcd_y >= LCD_ROWS) {
   089E                    1810 00113$:
   089E FD 21r01r00   [14] 1811 	ld	iy, #_lcd_y
   08A2 FD 7E 00      [19] 1812 	ld	a, 0 (iy)
   08A5 D6 04         [ 7] 1813 	sub	a, #0x04
   08A7 38 08         [12] 1814 	jr	C,00120$
                           1815 ;../../include/driver/hd44780.h:452: lcd_y--;
   08A9 FD 35 00      [23] 1816 	dec	0 (iy)
                           1817 ;../../include/driver/hd44780.h:453: lcd_scroll();
   08AC CDrC6r07      [17] 1818 	call	_lcd_scroll
   08AF 18 ED         [12] 1819 	jr	00113$
   08B1                    1820 00120$:
                           1821 ;../../include/driver/hd44780.h:464: o = lcd_x + (lcd_y * LCD_COLS);
   08B1 3Ar01r00      [13] 1822 	ld	a,(#_lcd_y + 0)
   08B4 4F            [ 4] 1823 	ld	c, a
   08B5 87            [ 4] 1824 	add	a, a
   08B6 87            [ 4] 1825 	add	a, a
   08B7 81            [ 4] 1826 	add	a, c
   08B8 87            [ 4] 1827 	add	a, a
   08B9 87            [ 4] 1828 	add	a, a
   08BA 21r00r00      [10] 1829 	ld	hl,#_lcd_x + 0
   08BD 4E            [ 7] 1830 	ld	c, (hl)
   08BE 81            [ 4] 1831 	add	a, c
   08BF 5F            [ 4] 1832 	ld	e, a
                           1833 ;../../include/driver/hd44780.h:467: lcd_writeControl(LCD_SETDDRAMADDR | lcd_map[o]);
   08C0 01r81r06      [10] 1834 	ld	bc, #_lcd_map_4rows+0
   08C3 6B            [ 4] 1835 	ld	l, e
   08C4 26 00         [ 7] 1836 	ld	h, #0x00
   08C6 09            [11] 1837 	add	hl, bc
   08C7 7E            [ 7] 1838 	ld	a, (hl)
   08C8 CB FF         [ 8] 1839 	set	7, a
   08CA D5            [11] 1840 	push	de
   08CB F5            [11] 1841 	push	af
   08CC 33            [ 6] 1842 	inc	sp
   08CD CDr5Cr06      [17] 1843 	call	_lcd_writeControl
   08D0 33            [ 6] 1844 	inc	sp
   08D1 D1            [10] 1845 	pop	de
                           1846 ;../../include/driver/hd44780.h:469: if (c > 0) {
   08D2 DD 7E 04      [19] 1847 	ld	a, 4 (ix)
   08D5 B7            [ 4] 1848 	or	a, a
   08D6 28 1C         [12] 1849 	jr	Z,00123$
                           1850 ;../../include/driver/hd44780.h:471: lcd_writeData(c);
   08D8 D5            [11] 1851 	push	de
   08D9 DD 7E 04      [19] 1852 	ld	a, 4 (ix)
   08DC F5            [11] 1853 	push	af
   08DD 33            [ 6] 1854 	inc	sp
   08DE CDrD2r06      [17] 1855 	call	_lcd_writeData
   08E1 33            [ 6] 1856 	inc	sp
   08E2 D1            [10] 1857 	pop	de
                           1858 ;../../include/driver/hd44780.h:472: lcd_x++;
   08E3 21r00r00      [10] 1859 	ld	hl, #_lcd_x+0
   08E6 34            [11] 1860 	inc	(hl)
                           1861 ;../../include/driver/hd44780.h:476: lcd_buffer[o] = c;
   08E7 21r10r00      [10] 1862 	ld	hl, #_lcd_buffer+0
   08EA 16 00         [ 7] 1863 	ld	d, #0x00
   08EC 19            [11] 1864 	add	hl, de
   08ED DD 7E 04      [19] 1865 	ld	a, 4 (ix)
   08F0 77            [ 7] 1866 	ld	(hl), a
                           1867 ;../../include/driver/hd44780.h:478: lcd_set_cursor();
   08F1 CDrE0r06      [17] 1868 	call	_lcd_set_cursor
   08F4                    1869 00123$:
                           1870 ;../../include/driver/hd44780.h:482: }
   08F4 DD E1         [14] 1871 	pop	ix
   08F6 C9            [10] 1872 	ret
                           1873 ;../../include/arch/gl4000/keyboard.h:72: byte keyboard_inkey() {
                           1874 ;	---------------------------------
                           1875 ; Function keyboard_inkey
                           1876 ; ---------------------------------
   08F7                    1877 _keyboard_inkey::
   08F7 DD E5         [15] 1878 	push	ix
   08F9 DD 21 00 00   [14] 1879 	ld	ix,#0
   08FD DD 39         [15] 1880 	add	ix,sp
   08FF 21 F9 FF      [10] 1881 	ld	hl, #-7
   0902 39            [11] 1882 	add	hl, sp
   0903 F9            [ 6] 1883 	ld	sp, hl
                           1884 ;../../include/arch/gl4000/keyboard.h:84: keyboard_port_matrixLatch = 0xff;
   0904 3E FF         [ 7] 1885 	ld	a, #0xff
   0906 D3 11         [11] 1886 	out	(_keyboard_port_matrixLatch), a
                           1887 ;../../include/arch/gl4000/keyboard.h:91: m = 0x01;
   0908 DD 36 F9 01   [19] 1888 	ld	-7 (ix), #0x01
                           1889 ;../../include/arch/gl4000/keyboard.h:92: for(row = 0; row < 8; row++) {
   090C AF            [ 4] 1890 	xor	a, a
   090D DD 77 FA      [19] 1891 	ld	-6 (ix), a
   0910 AF            [ 4] 1892 	xor	a, a
   0911 DD 77 FE      [19] 1893 	ld	-2 (ix), a
   0914                    1894 00109$:
                           1895 ;../../include/arch/gl4000/keyboard.h:96: keyboard_port_matrixRowOut = m;
   0914 DD 7E F9      [19] 1896 	ld	a, -7 (ix)
   0917 D3 10         [11] 1897 	out	(_keyboard_port_matrixRowOut), a
                           1898 ;../../include/arch/gl4000/keyboard.h:99: b1 = keyboard_port_matrixColIn;
   0919 DB 10         [11] 1899 	in	a, (_keyboard_port_matrixColIn)
   091B DD 77 FB      [19] 1900 	ld	-5 (ix), a
                           1901 ;../../include/arch/gl4000/keyboard.h:106: keyboard_port_matrixRowOut = 0x00;
   091E 3E 00         [ 7] 1902 	ld	a, #0x00
   0920 D3 10         [11] 1903 	out	(_keyboard_port_matrixRowOut), a
                           1904 ;../../include/arch/gl4000/keyboard.h:108: if (b1 < 0xff) {
   0922 DD 7E FB      [19] 1905 	ld	a, -5 (ix)
   0925 D6 FF         [ 7] 1906 	sub	a, #0xff
   0927 30 63         [12] 1907 	jr	NC,00105$
                           1908 ;../../include/arch/gl4000/keyboard.h:109: m2 = 0x01;
   0929 DD 36 FC 01   [19] 1909 	ld	-4 (ix), #0x01
                           1910 ;../../include/arch/gl4000/keyboard.h:110: for(col = 0; col < 8; col++) { 
   092D AF            [ 4] 1911 	xor	a, a
   092E DD 77 FD      [19] 1912 	ld	-3 (ix), a
   0931 AF            [ 4] 1913 	xor	a, a
   0932 DD 77 FF      [19] 1914 	ld	-1 (ix), a
   0935                    1915 00107$:
                           1916 ;../../include/arch/gl4000/keyboard.h:111: if ((b1 & m2) == 0) {
   0935 DD 7E FB      [19] 1917 	ld	a, -5 (ix)
   0938 DD A6 FC      [19] 1918 	and	a, -4 (ix)
   093B B7            [ 4] 1919 	or	a, a
   093C 20 37         [12] 1920 	jr	NZ,00102$
                           1921 ;../../include/arch/gl4000/keyboard.h:113: return vgl_key_map[8 * row + col];
   093E DD 7E FA      [19] 1922 	ld	a, -6 (ix)
   0941 87            [ 4] 1923 	add	a, a
   0942 87            [ 4] 1924 	add	a, a
   0943 87            [ 4] 1925 	add	a, a
   0944 DD 77 FF      [19] 1926 	ld	-1 (ix), a
   0947 DD 7E FD      [19] 1927 	ld	a, -3 (ix)
   094A DD 86 FF      [19] 1928 	add	a, -1 (ix)
   094D DD 77 FF      [19] 1929 	ld	-1 (ix), a
   0950 DD 77 FE      [19] 1930 	ld	-2 (ix), a
   0953 17            [ 4] 1931 	rla
   0954 9F            [ 4] 1932 	sbc	a, a
   0955 DD 77 FF      [19] 1933 	ld	-1 (ix), a
   0958 DD 7E FE      [19] 1934 	ld	a, -2 (ix)
   095B C6rAB         [ 7] 1935 	add	a, #<(_vgl_key_map)
   095D DD 77 FC      [19] 1936 	ld	-4 (ix), a
   0960 DD 7E FF      [19] 1937 	ld	a, -1 (ix)
   0963 CEs09         [ 7] 1938 	adc	a, #>(_vgl_key_map)
   0965 DD 77 FD      [19] 1939 	ld	-3 (ix), a
   0968 DD 6E FC      [19] 1940 	ld	l, -4 (ix)
   096B DD 66 FD      [19] 1941 	ld	h, -3 (ix)
   096E 7E            [ 7] 1942 	ld	a, (hl)
   096F DD 77 FF      [19] 1943 	ld	-1 (ix), a
   0972 6F            [ 4] 1944 	ld	l, a
   0973 18 31         [12] 1945 	jr	00111$
   0975                    1946 00102$:
                           1947 ;../../include/arch/gl4000/keyboard.h:116: m2 = m2 << 1;
   0975 DD 7E FC      [19] 1948 	ld	a, -4 (ix)
   0978 87            [ 4] 1949 	add	a, a
   0979 DD 77 FC      [19] 1950 	ld	-4 (ix), a
                           1951 ;../../include/arch/gl4000/keyboard.h:110: for(col = 0; col < 8; col++) { 
   097C DD 34 FF      [23] 1952 	inc	-1 (ix)
   097F DD 7E FF      [19] 1953 	ld	a, -1 (ix)
   0982 DD 77 FD      [19] 1954 	ld	-3 (ix), a
   0985 DD 7E FF      [19] 1955 	ld	a, -1 (ix)
   0988 D6 08         [ 7] 1956 	sub	a, #0x08
   098A 38 A9         [12] 1957 	jr	C,00107$
   098C                    1958 00105$:
                           1959 ;../../include/arch/gl4000/keyboard.h:135: m = m << 1;
   098C DD 7E F9      [19] 1960 	ld	a, -7 (ix)
   098F 87            [ 4] 1961 	add	a, a
   0990 DD 77 F9      [19] 1962 	ld	-7 (ix), a
                           1963 ;../../include/arch/gl4000/keyboard.h:92: for(row = 0; row < 8; row++) {
   0993 DD 34 FE      [23] 1964 	inc	-2 (ix)
   0996 DD 7E FE      [19] 1965 	ld	a, -2 (ix)
   0999 DD 77 FA      [19] 1966 	ld	-6 (ix), a
   099C DD 7E FE      [19] 1967 	ld	a, -2 (ix)
   099F D6 08         [ 7] 1968 	sub	a, #0x08
   09A1 DAr14r09      [10] 1969 	jp	C, 00109$
                           1970 ;../../include/arch/gl4000/keyboard.h:147: return 0;
   09A4 2E 00         [ 7] 1971 	ld	l, #0x00
   09A6                    1972 00111$:
                           1973 ;../../include/arch/gl4000/keyboard.h:148: }
   09A6 DD F9         [10] 1974 	ld	sp, ix
   09A8 DD E1         [14] 1975 	pop	ix
   09AA C9            [10] 1976 	ret
   09AB                    1977 _vgl_key_map:
   09AB 09                 1978 	.db #0x09	; 9
   09AC 1B                 1979 	.db #0x1b	; 27
   09AD 65                 1980 	.db #0x65	; 101	'e'
   09AE 66                 1981 	.db #0x66	; 102	'f'
   09AF 67                 1982 	.db #0x67	; 103	'g'
   09B0 69                 1983 	.db #0x69	; 105	'i'
   09B1 6A                 1984 	.db #0x6a	; 106	'j'
   09B2 6B                 1985 	.db #0x6b	; 107	'k'
   09B3 63                 1986 	.db #0x63	; 99	'c'
   09B4 31                 1987 	.db #0x31	; 49	'1'
   09B5 51                 1988 	.db #0x51	; 81	'Q'
   09B6 41                 1989 	.db #0x41	; 65	'A'
   09B7 59                 1990 	.db #0x59	; 89	'Y'
   09B8 61                 1991 	.db #0x61	; 97	'a'
   09B9 20                 1992 	.db #0x20	; 32
   09BA 0D                 1993 	.db #0x0d	; 13
   09BB 32                 1994 	.db #0x32	; 50	'2'
   09BC 33                 1995 	.db #0x33	; 51	'3'
   09BD 45                 1996 	.db #0x45	; 69	'E'
   09BE 53                 1997 	.db #0x53	; 83	'S'
   09BF 44                 1998 	.db #0x44	; 68	'D'
   09C0 58                 1999 	.db #0x58	; 88	'X'
   09C1 43                 2000 	.db #0x43	; 67	'C'
   09C2 57                 2001 	.db #0x57	; 87	'W'
   09C3 34                 2002 	.db #0x34	; 52	'4'
   09C4 35                 2003 	.db #0x35	; 53	'5'
   09C5 54                 2004 	.db #0x54	; 84	'T'
   09C6 46                 2005 	.db #0x46	; 70	'F'
   09C7 47                 2006 	.db #0x47	; 71	'G'
   09C8 56                 2007 	.db #0x56	; 86	'V'
   09C9 42                 2008 	.db #0x42	; 66	'B'
   09CA 52                 2009 	.db #0x52	; 82	'R'
   09CB 36                 2010 	.db #0x36	; 54	'6'
   09CC 37                 2011 	.db #0x37	; 55	'7'
   09CD 55                 2012 	.db #0x55	; 85	'U'
   09CE 48                 2013 	.db #0x48	; 72	'H'
   09CF 4A                 2014 	.db #0x4a	; 74	'J'
   09D0 4E                 2015 	.db #0x4e	; 78	'N'
   09D1 4D                 2016 	.db #0x4d	; 77	'M'
   09D2 5A                 2017 	.db #0x5a	; 90	'Z'
   09D3 38                 2018 	.db #0x38	; 56	'8'
   09D4 39                 2019 	.db #0x39	; 57	'9'
   09D5 4F                 2020 	.db #0x4f	; 79	'O'
   09D6 4B                 2021 	.db #0x4b	; 75	'K'
   09D7 4C                 2022 	.db #0x4c	; 76	'L'
   09D8 2C                 2023 	.db #0x2c	; 44
   09D9 2E                 2024 	.db #0x2e	; 46
   09DA 49                 2025 	.db #0x49	; 73	'I'
   09DB 30                 2026 	.db #0x30	; 48	'0'
   09DC 08                 2027 	.db #0x08	; 8
   09DD 3D                 2028 	.db #0x3d	; 61
   09DE 3A                 2029 	.db #0x3a	; 58
   09DF 27                 2030 	.db #0x27	; 39
   09E0 2F                 2031 	.db #0x2f	; 47
   09E1 73                 2032 	.db #0x73	; 115	's'
   09E2 50                 2033 	.db #0x50	; 80	'P'
   09E3 78                 2034 	.db #0x78	; 120	'x'
   09E4 79                 2035 	.db #0x79	; 121	'y'
   09E5 68                 2036 	.db #0x68	; 104	'h'
   09E6 6C                 2037 	.db #0x6c	; 108	'l'
   09E7 0D                 2038 	.db #0x0d	; 13
   09E8 7F                 2039 	.db #0x7f	; 127
   09E9 1B                 2040 	.db #0x1b	; 27
   09EA 7A                 2041 	.db #0x7a	; 122	'z'
                           2042 ;../../include/arch/gl4000/keyboard.h:152: byte keyboard_checkkey() {
                           2043 ;	---------------------------------
                           2044 ; Function keyboard_checkkey
                           2045 ; ---------------------------------
   09EB                    2046 _keyboard_checkkey::
                           2047 ;../../include/arch/gl4000/keyboard.h:159: keyboard_port_matrixLatch = 0xff;
   09EB 3E FF         [ 7] 2048 	ld	a, #0xff
   09ED D3 11         [11] 2049 	out	(_keyboard_port_matrixLatch), a
                           2050 ;../../include/arch/gl4000/keyboard.h:163: keyboard_port_matrixRowOut = 0xff;
   09EF 3E FF         [ 7] 2051 	ld	a, #0xff
   09F1 D3 10         [11] 2052 	out	(_keyboard_port_matrixRowOut), a
                           2053 ;../../include/arch/gl4000/keyboard.h:166: b1 = keyboard_port_matrixColIn;
   09F3 DB 10         [11] 2054 	in	a, (_keyboard_port_matrixColIn)
   09F5 4F            [ 4] 2055 	ld	c, a
                           2056 ;../../include/arch/gl4000/keyboard.h:168: keyboard_port_matrixRowOut = 0x00;
   09F6 3E 00         [ 7] 2057 	ld	a, #0x00
   09F8 D3 10         [11] 2058 	out	(_keyboard_port_matrixRowOut), a
                           2059 ;../../include/arch/gl4000/keyboard.h:170: if (b1 < 0xff) return b1;	// Some key is pressed
   09FA 79            [ 4] 2060 	ld	a, c
   09FB D6 FF         [ 7] 2061 	sub	a, #0xff
   09FD 30 02         [12] 2062 	jr	NC,00102$
   09FF 69            [ 4] 2063 	ld	l, c
   0A00 C9            [10] 2064 	ret
   0A01                    2065 00102$:
                           2066 ;../../include/arch/gl4000/keyboard.h:173: return 0;	// No keys are pressed
   0A01 2E 00         [ 7] 2067 	ld	l, #0x00
                           2068 ;../../include/arch/gl4000/keyboard.h:174: }
   0A03 C9            [10] 2069 	ret
                           2070 ;../../include/arch/gl4000/keyboard.h:178: char keyboard_getchar() {
                           2071 ;	---------------------------------
                           2072 ; Function keyboard_getchar
                           2073 ; ---------------------------------
   0A04                    2074 _keyboard_getchar::
                           2075 ;../../include/arch/gl4000/keyboard.h:184: while(1) {
   0A04                    2076 00106$:
                           2077 ;../../include/arch/gl4000/keyboard.h:185: c = keyboard_inkey();
   0A04 CDrF7r08      [17] 2078 	call	_keyboard_inkey
   0A07 4D            [ 4] 2079 	ld	c, l
                           2080 ;../../include/arch/gl4000/keyboard.h:186: if (c == 0) keyboard_getchar_last = 0;
   0A08 79            [ 4] 2081 	ld	a, c
   0A09 B7            [ 4] 2082 	or	a, a
   0A0A 20 05         [12] 2083 	jr	NZ,00102$
   0A0C 21r03r00      [10] 2084 	ld	hl,#_keyboard_getchar_last + 0
   0A0F 36 00         [10] 2085 	ld	(hl), #0x00
   0A11                    2086 00102$:
                           2087 ;../../include/arch/gl4000/keyboard.h:187: if (c != keyboard_getchar_last) break;
   0A11 FD 21r03r00   [14] 2088 	ld	iy, #_keyboard_getchar_last
   0A15 FD 7E 00      [19] 2089 	ld	a, 0 (iy)
   0A18 91            [ 4] 2090 	sub	a, c
   0A19 28 E9         [12] 2091 	jr	Z,00106$
                           2092 ;../../include/arch/gl4000/keyboard.h:190: keyboard_getchar_last = c;
   0A1B FD 71 00      [19] 2093 	ld	0 (iy), c
                           2094 ;../../include/arch/gl4000/keyboard.h:191: return c;
   0A1E 69            [ 4] 2095 	ld	l, c
                           2096 ;../../include/arch/gl4000/keyboard.h:192: }
   0A1F C9            [10] 2097 	ret
                           2098 ;../../include/arch/gl4000/sound.h:9: void vgl_sound_off() {
                           2099 ;	---------------------------------
                           2100 ; Function vgl_sound_off
                           2101 ; ---------------------------------
   0A20                    2102 _vgl_sound_off::
                           2103 ;../../include/arch/gl4000/sound.h:19: __endasm;
                           2104 ;	Speaker off
                           2105 ;ld	a, #0x00 ; +20h
   0A20 DB 12         [11] 2106 	in	a, (0x12)
   0A22 E6 F7         [ 7] 2107 	and	#0xf7
   0A24 D3 12         [11] 2108 	out	(0x12), a
   0A26 C9            [10] 2109 	ret
                           2110 ;../../include/arch/gl4000/sound.h:20: }
   0A27 C9            [10] 2111 	ret
                           2112 ;../../include/arch/gl4000/sound.h:22: void vgl_sound_tone(word frq, word len) {
                           2113 ;	---------------------------------
                           2114 ; Function vgl_sound_tone
                           2115 ; ---------------------------------
   0A28                    2116 _vgl_sound_tone::
                           2117 ;../../include/arch/gl4000/sound.h:109: __endasm;
                           2118 ;di
   0A28 F5            [11] 2119 	push	af
   0A29 E5            [11] 2120 	push	hl
   0A2A D5            [11] 2121 	push	de
   0A2B C5            [11] 2122 	push	bc
                           2123 ;	Get frq param
   0A2C 21 02 00      [10] 2124 	ld	hl, #2+0
   0A2F 39            [11] 2125 	add	hl, sp
   0A30 5E            [ 7] 2126 	ld	e, (hl)
   0A31 21 03 00      [10] 2127 	ld	hl, #2+1
   0A34 39            [11] 2128 	add	hl, sp
   0A35 56            [ 7] 2129 	ld	d, (hl) ; frq is now in DE
                           2130 ;inc	de ; Inc by one
   0A36 42            [ 4] 2131 	ld	b, d ; Safe DE for later in BC
   0A37 4B            [ 4] 2132 	ld	c, e
                           2133 ;len	to DE
   0A38 21 04 00      [10] 2134 	ld	hl, #4+0
   0A3B 39            [11] 2135 	add	hl, sp
   0A3C 5E            [ 7] 2136 	ld	e, (hl)
   0A3D 21 05 00      [10] 2137 	ld	hl, #4+1
   0A40 39            [11] 2138 	add	hl, sp
   0A41 56            [ 7] 2139 	ld	d, (hl) ; len is now in DE
                           2140 ;inc	de ; Inc by one
   0A42 60            [ 4] 2141 	ld	h, b ; Copy old frq value back from BC to HL
   0A43 69            [ 4] 2142 	ld	l, c
                           2143 ;	Actual sound loop
   0A44                    2144 	  _sound_loop:
                           2145 ;	Speaker on
   0A44 3E 08         [ 7] 2146 	ld	a, #0x08 ; +20h
   0A46 D3 12         [11] 2147 	out	(0x12), a
   0A48 CDr59r0A      [17] 2148 	call	_sound_delay
                           2149 ;	Speaker off
   0A4B 3E 00         [ 7] 2150 	ld	a, #0x0 ; +20h
   0A4D D3 12         [11] 2151 	out	(0x12), a
   0A4F CDr59r0A      [17] 2152 	call	_sound_delay
                           2153 ;djnz	_sound_loop
                           2154 ;dec	e
                           2155 ;jr	nz, _sound_loop
                           2156 ;dec	d
                           2157 ;jr	nz, _sound_loop
   0A52 1B            [ 6] 2158 	dec	de
   0A53 7A            [ 4] 2159 	ld	a, d
   0A54 B3            [ 4] 2160 	or	e
   0A55 20 ED         [12] 2161 	jr	nz, _sound_loop
   0A57 18 0A         [12] 2162 	jr	_sound_end
   0A59                    2163 	  _sound_delay:
   0A59 E5            [11] 2164 	push	hl
   0A5A F5            [11] 2165 	push	af
   0A5B                    2166 	   _sound_delay_loop:
   0A5B 2B            [ 6] 2167 	dec	hl
   0A5C 7C            [ 4] 2168 	ld	a,h
   0A5D B5            [ 4] 2169 	or	l
   0A5E 20 FB         [12] 2170 	jr	nz, _sound_delay_loop
   0A60 F1            [10] 2171 	pop	af
   0A61 E1            [10] 2172 	pop	hl
   0A62 C9            [10] 2173 	ret
   0A63                    2174 	 _sound_end:
   0A63 C1            [10] 2175 	pop	bc
   0A64 D1            [10] 2176 	pop	de
   0A65 E1            [10] 2177 	pop	hl
   0A66 F1            [10] 2178 	pop	af
                           2179 ;ei
                           2180 ;../../include/arch/gl4000/sound.h:111: }
   0A67 C9            [10] 2181 	ret
                           2182 ;../../include/arch/gl4000/sound.h:118: void sound_note(word n, word len) {
                           2183 ;	---------------------------------
                           2184 ; Function sound_note
                           2185 ; ---------------------------------
   0A68                    2186 _sound_note::
   0A68 DD E5         [15] 2187 	push	ix
   0A6A DD 21 00 00   [14] 2188 	ld	ix,#0
   0A6E DD 39         [15] 2189 	add	ix,sp
                           2190 ;../../include/arch/gl4000/sound.h:121: switch(n % 12) {
   0A70 DD 5E 04      [19] 2191 	ld	e, 4 (ix)
   0A73 DD 56 05      [19] 2192 	ld	d, 5 (ix)
   0A76 D5            [11] 2193 	push	de
   0A77 21 0C 00      [10] 2194 	ld	hl, #0x000c
   0A7A E5            [11] 2195 	push	hl
   0A7B D5            [11] 2196 	push	de
   0A7C CDr00r00      [17] 2197 	call	__moduint
   0A7F F1            [10] 2198 	pop	af
   0A80 F1            [10] 2199 	pop	af
   0A81 4D            [ 4] 2200 	ld	c, l
   0A82 44            [ 4] 2201 	ld	b, h
   0A83 D1            [10] 2202 	pop	de
   0A84 3E 0B         [ 7] 2203 	ld	a, #0x0b
   0A86 B9            [ 4] 2204 	cp	a, c
   0A87 3E 00         [ 7] 2205 	ld	a, #0x00
   0A89 98            [ 4] 2206 	sbc	a, b
   0A8A 38 67         [12] 2207 	jr	C,00113$
   0A8C 06 00         [ 7] 2208 	ld	b, #0x00
   0A8E 21r95r0A      [10] 2209 	ld	hl, #00121$
   0A91 09            [11] 2210 	add	hl, bc
   0A92 09            [11] 2211 	add	hl, bc
   0A93 09            [11] 2212 	add	hl, bc
   0A94 E9            [ 4] 2213 	jp	(hl)
   0A95                    2214 00121$:
   0A95 C3rB9r0A      [10] 2215 	jp	00101$
   0A98 C3rBEr0A      [10] 2216 	jp	00102$
   0A9B C3rC3r0A      [10] 2217 	jp	00103$
   0A9E C3rC8r0A      [10] 2218 	jp	00104$
   0AA1 C3rCDr0A      [10] 2219 	jp	00105$
   0AA4 C3rD2r0A      [10] 2220 	jp	00106$
   0AA7 C3rD7r0A      [10] 2221 	jp	00107$
   0AAA C3rDCr0A      [10] 2222 	jp	00108$
   0AAD C3rE1r0A      [10] 2223 	jp	00109$
   0AB0 C3rE6r0A      [10] 2224 	jp	00110$
   0AB3 C3rEBr0A      [10] 2225 	jp	00111$
   0AB6 C3rF0r0A      [10] 2226 	jp	00112$
                           2227 ;../../include/arch/gl4000/sound.h:122: case 0:	frq = 0x0900;	break;
   0AB9                    2228 00101$:
   0AB9 01 00 09      [10] 2229 	ld	bc, #0x0900
   0ABC 18 35         [12] 2230 	jr	00113$
                           2231 ;../../include/arch/gl4000/sound.h:123: case 1:	frq = 0x087e;	break;
   0ABE                    2232 00102$:
   0ABE 01 7E 08      [10] 2233 	ld	bc, #0x087e
   0AC1 18 30         [12] 2234 	jr	00113$
                           2235 ;../../include/arch/gl4000/sound.h:124: case 2:	frq = 0x0804;	break;
   0AC3                    2236 00103$:
   0AC3 01 04 08      [10] 2237 	ld	bc, #0x0804
   0AC6 18 2B         [12] 2238 	jr	00113$
                           2239 ;../../include/arch/gl4000/sound.h:125: case 3:	frq = 0x0791;	break;
   0AC8                    2240 00104$:
   0AC8 01 91 07      [10] 2241 	ld	bc, #0x0791
   0ACB 18 26         [12] 2242 	jr	00113$
                           2243 ;../../include/arch/gl4000/sound.h:126: case 4:	frq = 0x0724;	break;
   0ACD                    2244 00105$:
   0ACD 01 24 07      [10] 2245 	ld	bc, #0x0724
   0AD0 18 21         [12] 2246 	jr	00113$
                           2247 ;../../include/arch/gl4000/sound.h:127: case 5:	frq = 0x06be;	break;
   0AD2                    2248 00106$:
   0AD2 01 BE 06      [10] 2249 	ld	bc, #0x06be
   0AD5 18 1C         [12] 2250 	jr	00113$
                           2251 ;../../include/arch/gl4000/sound.h:128: case 6:	frq = 0x065d;	break;
   0AD7                    2252 00107$:
   0AD7 01 5D 06      [10] 2253 	ld	bc, #0x065d
   0ADA 18 17         [12] 2254 	jr	00113$
                           2255 ;../../include/arch/gl4000/sound.h:129: case 7:	frq = 0x0601;	break;
   0ADC                    2256 00108$:
   0ADC 01 01 06      [10] 2257 	ld	bc, #0x0601
   0ADF 18 12         [12] 2258 	jr	00113$
                           2259 ;../../include/arch/gl4000/sound.h:130: case 8:	frq = 0x05ab;	break;
   0AE1                    2260 00109$:
   0AE1 01 AB 05      [10] 2261 	ld	bc, #0x05ab
   0AE4 18 0D         [12] 2262 	jr	00113$
                           2263 ;../../include/arch/gl4000/sound.h:131: case 9:	frq = 0x0559;	break;
   0AE6                    2264 00110$:
   0AE6 01 59 05      [10] 2265 	ld	bc, #0x0559
   0AE9 18 08         [12] 2266 	jr	00113$
                           2267 ;../../include/arch/gl4000/sound.h:132: case 10:	frq = 0x050d;	break;
   0AEB                    2268 00111$:
   0AEB 01 0D 05      [10] 2269 	ld	bc, #0x050d
   0AEE 18 03         [12] 2270 	jr	00113$
                           2271 ;../../include/arch/gl4000/sound.h:133: case 11:	frq = 0x04c4;	break;
   0AF0                    2272 00112$:
   0AF0 01 C4 04      [10] 2273 	ld	bc, #0x04c4
                           2274 ;../../include/arch/gl4000/sound.h:134: }
   0AF3                    2275 00113$:
                           2276 ;../../include/arch/gl4000/sound.h:136: frq = frq >> (n/12);
   0AF3 C5            [11] 2277 	push	bc
   0AF4 21 0C 00      [10] 2278 	ld	hl, #0x000c
   0AF7 E5            [11] 2279 	push	hl
   0AF8 D5            [11] 2280 	push	de
   0AF9 CDr00r00      [17] 2281 	call	__divuint
   0AFC F1            [10] 2282 	pop	af
   0AFD F1            [10] 2283 	pop	af
   0AFE C1            [10] 2284 	pop	bc
   0AFF 2C            [ 4] 2285 	inc	l
   0B00 18 04         [12] 2286 	jr	00123$
   0B02                    2287 00122$:
   0B02 CB 38         [ 8] 2288 	srl	b
   0B04 CB 19         [ 8] 2289 	rr	c
   0B06                    2290 00123$:
   0B06 2D            [ 4] 2291 	dec	l
   0B07 20 F9         [12] 2292 	jr	NZ, 00122$
                           2293 ;../../include/arch/gl4000/sound.h:137: len = 150 * (len / frq);	// Length to wave length, correcting for rough milliseconds
   0B09 C5            [11] 2294 	push	bc
   0B0A C5            [11] 2295 	push	bc
   0B0B DD 6E 06      [19] 2296 	ld	l, 6 (ix)
   0B0E DD 66 07      [19] 2297 	ld	h, 7 (ix)
   0B11 E5            [11] 2298 	push	hl
   0B12 CDr00r00      [17] 2299 	call	__divuint
   0B15 F1            [10] 2300 	pop	af
   0B16 F1            [10] 2301 	pop	af
   0B17 C1            [10] 2302 	pop	bc
   0B18 5D            [ 4] 2303 	ld	e, l
   0B19 54            [ 4] 2304 	ld	d, h
   0B1A 29            [11] 2305 	add	hl, hl
   0B1B 29            [11] 2306 	add	hl, hl
   0B1C 29            [11] 2307 	add	hl, hl
   0B1D 19            [11] 2308 	add	hl, de
   0B1E 29            [11] 2309 	add	hl, hl
   0B1F 29            [11] 2310 	add	hl, hl
   0B20 19            [11] 2311 	add	hl, de
   0B21 29            [11] 2312 	add	hl, hl
   0B22 19            [11] 2313 	add	hl, de
   0B23 29            [11] 2314 	add	hl, hl
                           2315 ;../../include/arch/gl4000/sound.h:138: sound_tone(frq, len);
   0B24 DD 75 06      [19] 2316 	ld	6 (ix), l
   0B27 DD 74 07      [19] 2317 	ld	7 (ix), h
   0B2A E5            [11] 2318 	push	hl
   0B2B C5            [11] 2319 	push	bc
   0B2C CDr28r0A      [17] 2320 	call	_vgl_sound_tone
   0B2F F1            [10] 2321 	pop	af
   0B30 F1            [10] 2322 	pop	af
                           2323 ;../../include/arch/gl4000/sound.h:139: }
   0B31 DD E1         [14] 2324 	pop	ix
   0B33 C9            [10] 2325 	ret
                           2326 ;../../include/arch/gl4000/sound.h:141: void beep() {
                           2327 ;	---------------------------------
                           2328 ; Function beep
                           2329 ; ---------------------------------
   0B34                    2330 _beep::
                           2331 ;../../include/arch/gl4000/sound.h:142: sound_note(12*4+0, 0x0111);
   0B34 21 11 01      [10] 2332 	ld	hl, #0x0111
   0B37 E5            [11] 2333 	push	hl
   0B38 21 30 00      [10] 2334 	ld	hl, #0x0030
   0B3B E5            [11] 2335 	push	hl
   0B3C CDr68r0A      [17] 2336 	call	_sound_note
   0B3F F1            [10] 2337 	pop	af
   0B40 F1            [10] 2338 	pop	af
                           2339 ;../../include/arch/gl4000/sound.h:143: }
   0B41 C9            [10] 2340 	ret
                           2341 ;../../include/arch/gl4000/system.h:39: void vgldk_init() __naked {
                           2342 ;	---------------------------------
                           2343 ; Function vgldk_init
                           2344 ; ---------------------------------
   0B42                    2345 _vgldk_init::
                           2346 ;../../include/arch/gl4000/system.h:45: __endasm;
   0B42 F3            [ 4] 2347 	di
                           2348 ;;	Set stack pointer directly above top of memory.
   0B43 31 F0 DF      [10] 2349 	ld	sp, #0xdff0 ; Load StackPointer to 0xdff0
                           2350 ;../../include/arch/gl4000/system.h:47: lcd_init();
   0B46 CDr40r07      [17] 2351 	call	_lcd_init
                           2352 ;../../include/arch/gl4000/system.h:48: sound_off();
   0B49 CDr20r0A      [17] 2353 	call	_vgl_sound_off
                           2354 ;../../include/arch/gl4000/system.h:49: lcd_clear();
   0B4C CDr0Cr07      [17] 2355 	call	_lcd_clear
                           2356 ;../../include/arch/gl4000/system.h:54: __endasm;
   0B4F C3rA1r0D      [10] 2357 	jp	_main
                           2358 ;../../include/arch/gl4000/system.h:55: }
                           2359 ;../../include/stdiomin.h:73: int puts(const char *str) {
                           2360 ;	---------------------------------
                           2361 ; Function puts
                           2362 ; ---------------------------------
   0B52                    2363 _puts::
                           2364 ;../../include/stdiomin.h:74: while(*str) putchar(*str++);
   0B52 D1            [10] 2365 	pop	de
   0B53 C1            [10] 2366 	pop	bc
   0B54 C5            [11] 2367 	push	bc
   0B55 D5            [11] 2368 	push	de
   0B56                    2369 00101$:
   0B56 0A            [ 7] 2370 	ld	a, (bc)
   0B57 B7            [ 4] 2371 	or	a, a
   0B58 28 0B         [12] 2372 	jr	Z,00103$
   0B5A 03            [ 6] 2373 	inc	bc
   0B5B C5            [11] 2374 	push	bc
   0B5C F5            [11] 2375 	push	af
   0B5D 33            [ 6] 2376 	inc	sp
   0B5E CDr28r08      [17] 2377 	call	_lcd_putchar
   0B61 33            [ 6] 2378 	inc	sp
   0B62 C1            [10] 2379 	pop	bc
   0B63 18 F1         [12] 2380 	jr	00101$
   0B65                    2381 00103$:
                           2382 ;../../include/stdiomin.h:75: putchar('\n');
   0B65 3E 0A         [ 7] 2383 	ld	a, #0x0a
   0B67 F5            [11] 2384 	push	af
   0B68 33            [ 6] 2385 	inc	sp
   0B69 CDr28r08      [17] 2386 	call	_lcd_putchar
   0B6C 33            [ 6] 2387 	inc	sp
                           2388 ;../../include/stdiomin.h:76: return 1;
   0B6D 21 01 00      [10] 2389 	ld	hl, #0x0001
                           2390 ;../../include/stdiomin.h:77: }
   0B70 C9            [10] 2391 	ret
                           2392 ;../../include/stdiomin.h:79: void printf(const char *pc) {
                           2393 ;	---------------------------------
                           2394 ; Function printf
                           2395 ; ---------------------------------
   0B71                    2396 _printf::
                           2397 ;../../include/stdiomin.h:89: while(*pc) putchar(*pc++);
   0B71 D1            [10] 2398 	pop	de
   0B72 C1            [10] 2399 	pop	bc
   0B73 C5            [11] 2400 	push	bc
   0B74 D5            [11] 2401 	push	de
   0B75                    2402 00101$:
   0B75 0A            [ 7] 2403 	ld	a, (bc)
   0B76 B7            [ 4] 2404 	or	a, a
   0B77 C8            [11] 2405 	ret	Z
   0B78 03            [ 6] 2406 	inc	bc
   0B79 C5            [11] 2407 	push	bc
   0B7A F5            [11] 2408 	push	af
   0B7B 33            [ 6] 2409 	inc	sp
   0B7C CDr28r08      [17] 2410 	call	_lcd_putchar
   0B7F 33            [ 6] 2411 	inc	sp
   0B80 C1            [10] 2412 	pop	bc
                           2413 ;../../include/stdiomin.h:90: }
   0B81 18 F2         [12] 2414 	jr	00101$
                           2415 ;../../include/stdiomin.h:94: void printf_d(byte d) {
                           2416 ;	---------------------------------
                           2417 ; Function printf_d
                           2418 ; ---------------------------------
   0B83                    2419 _printf_d::
                           2420 ;../../include/stdiomin.h:99: i = 100;
   0B83 0E 64         [ 7] 2421 	ld	c, #0x64
                           2422 ;../../include/stdiomin.h:100: while(i > 0) {
   0B85                    2423 00101$:
   0B85 79            [ 4] 2424 	ld	a, c
   0B86 B7            [ 4] 2425 	or	a, a
   0B87 C8            [11] 2426 	ret	Z
                           2427 ;../../include/stdiomin.h:101: putchar('0' + ((d / i) % 10));
   0B88 C5            [11] 2428 	push	bc
   0B89 79            [ 4] 2429 	ld	a, c
   0B8A F5            [11] 2430 	push	af
   0B8B 33            [ 6] 2431 	inc	sp
   0B8C 21 05 00      [10] 2432 	ld	hl, #5+0
   0B8F 39            [11] 2433 	add	hl, sp
   0B90 7E            [ 7] 2434 	ld	a, (hl)
   0B91 F5            [11] 2435 	push	af
   0B92 33            [ 6] 2436 	inc	sp
   0B93 CDr00r00      [17] 2437 	call	__divuchar
   0B96 F1            [10] 2438 	pop	af
   0B97 C1            [10] 2439 	pop	bc
   0B98 26 00         [ 7] 2440 	ld	h, #0x00
   0B9A C5            [11] 2441 	push	bc
   0B9B 11 0A 00      [10] 2442 	ld	de, #0x000a
   0B9E D5            [11] 2443 	push	de
   0B9F E5            [11] 2444 	push	hl
   0BA0 CDr00r00      [17] 2445 	call	__modsint
   0BA3 F1            [10] 2446 	pop	af
   0BA4 F1            [10] 2447 	pop	af
   0BA5 C1            [10] 2448 	pop	bc
   0BA6 7D            [ 4] 2449 	ld	a, l
   0BA7 C6 30         [ 7] 2450 	add	a, #0x30
   0BA9 C5            [11] 2451 	push	bc
   0BAA F5            [11] 2452 	push	af
   0BAB 33            [ 6] 2453 	inc	sp
   0BAC CDr28r08      [17] 2454 	call	_lcd_putchar
   0BAF 33            [ 6] 2455 	inc	sp
   0BB0 C1            [10] 2456 	pop	bc
                           2457 ;../../include/stdiomin.h:102: i /= 10;
   0BB1 06 00         [ 7] 2458 	ld	b, #0x00
   0BB3 21 0A 00      [10] 2459 	ld	hl, #0x000a
   0BB6 E5            [11] 2460 	push	hl
   0BB7 C5            [11] 2461 	push	bc
   0BB8 CDr00r00      [17] 2462 	call	__divsint
   0BBB F1            [10] 2463 	pop	af
   0BBC F1            [10] 2464 	pop	af
   0BBD 4D            [ 4] 2465 	ld	c, l
                           2466 ;../../include/stdiomin.h:112: }
   0BBE 18 C5         [12] 2467 	jr	00101$
                           2468 ;../../include/stdiomin.h:115: char *gets(char *pc) {
                           2469 ;	---------------------------------
                           2470 ; Function gets
                           2471 ; ---------------------------------
   0BC0                    2472 _gets::
   0BC0 DD E5         [15] 2473 	push	ix
   0BC2 DD 21 00 00   [14] 2474 	ld	ix,#0
   0BC6 DD 39         [15] 2475 	add	ix,sp
                           2476 ;../../include/stdiomin.h:118: pcs = pc;
   0BC8 DD 4E 04      [19] 2477 	ld	c, 4 (ix)
   0BCB DD 46 05      [19] 2478 	ld	b, 5 (ix)
                           2479 ;../../include/stdiomin.h:123: while(1) {
   0BCE                    2480 00113$:
                           2481 ;../../include/stdiomin.h:124: c = getchar();
   0BCE C5            [11] 2482 	push	bc
   0BCF CDr04r0A      [17] 2483 	call	_keyboard_getchar
   0BD2 7D            [ 4] 2484 	ld	a, l
   0BD3 C1            [10] 2485 	pop	bc
   0BD4 57            [ 4] 2486 	ld	d, a
                           2487 ;../../include/stdiomin.h:129: putchar(c);
   0BD5 C5            [11] 2488 	push	bc
   0BD6 D5            [11] 2489 	push	de
   0BD7 D5            [11] 2490 	push	de
   0BD8 33            [ 6] 2491 	inc	sp
   0BD9 CDr28r08      [17] 2492 	call	_lcd_putchar
   0BDC 33            [ 6] 2493 	inc	sp
   0BDD D1            [10] 2494 	pop	de
   0BDE C1            [10] 2495 	pop	bc
                           2496 ;../../include/stdiomin.h:131: if ( (c == 8) || (c == 127) ) {
   0BDF 7A            [ 4] 2497 	ld	a,d
   0BE0 FE 08         [ 7] 2498 	cp	a,#0x08
   0BE2 28 04         [12] 2499 	jr	Z,00105$
   0BE4 D6 7F         [ 7] 2500 	sub	a, #0x7f
   0BE6 20 19         [12] 2501 	jr	NZ,00106$
   0BE8                    2502 00105$:
                           2503 ;../../include/stdiomin.h:133: if (pc > pcs) {
   0BE8 79            [ 4] 2504 	ld	a, c
   0BE9 DD 96 04      [19] 2505 	sub	a, 4 (ix)
   0BEC 78            [ 4] 2506 	ld	a, b
   0BED DD 9E 05      [19] 2507 	sbc	a, 5 (ix)
   0BF0 30 DC         [12] 2508 	jr	NC,00113$
                           2509 ;../../include/stdiomin.h:134: pc--;
   0BF2 DD 6E 04      [19] 2510 	ld	l, 4 (ix)
   0BF5 DD 66 05      [19] 2511 	ld	h, 5 (ix)
   0BF8 2B            [ 6] 2512 	dec	hl
   0BF9 DD 75 04      [19] 2513 	ld	4 (ix), l
   0BFC DD 74 05      [19] 2514 	ld	5 (ix), h
                           2515 ;../../include/stdiomin.h:142: continue;
   0BFF 18 CD         [12] 2516 	jr	00113$
   0C01                    2517 00106$:
                           2518 ;../../include/stdiomin.h:118: pcs = pc;
   0C01 DD 6E 04      [19] 2519 	ld	l, 4 (ix)
   0C04 DD 66 05      [19] 2520 	ld	h, 5 (ix)
                           2521 ;../../include/stdiomin.h:145: if ((c == '\n') || (c == '\r') || (c == 0)) {
   0C07 7A            [ 4] 2522 	ld	a,d
   0C08 FE 0A         [ 7] 2523 	cp	a,#0x0a
   0C0A 28 07         [12] 2524 	jr	Z,00108$
   0C0C FE 0D         [ 7] 2525 	cp	a,#0x0d
   0C0E 28 03         [12] 2526 	jr	Z,00108$
   0C10 B7            [ 4] 2527 	or	a, a
   0C11 20 06         [12] 2528 	jr	NZ,00109$
   0C13                    2529 00108$:
                           2530 ;../../include/stdiomin.h:149: *pc = 0;
   0C13 36 00         [10] 2531 	ld	(hl), #0x00
                           2532 ;../../include/stdiomin.h:150: return pcs;
   0C15 69            [ 4] 2533 	ld	l, c
   0C16 60            [ 4] 2534 	ld	h, b
   0C17 18 0A         [12] 2535 	jr	00115$
   0C19                    2536 00109$:
                           2537 ;../../include/stdiomin.h:154: *pc++ = c;
   0C19 72            [ 7] 2538 	ld	(hl), d
   0C1A 23            [ 6] 2539 	inc	hl
   0C1B DD 75 04      [19] 2540 	ld	4 (ix), l
   0C1E DD 74 05      [19] 2541 	ld	5 (ix), h
   0C21 18 AB         [12] 2542 	jr	00113$
   0C23                    2543 00115$:
                           2544 ;../../include/stdiomin.h:157: }
   0C23 DD E1         [14] 2545 	pop	ix
   0C25 C9            [10] 2546 	ret
                           2547 ;./bios.c:52: void bios_memset(byte *addr, byte b, word count) {
                           2548 ;	---------------------------------
                           2549 ; Function bios_memset
                           2550 ; ---------------------------------
   0C26                    2551 _bios_memset::
                           2552 ;./bios.c:53: while(count > 0) {
   0C26 D1            [10] 2553 	pop	de
   0C27 C1            [10] 2554 	pop	bc
   0C28 C5            [11] 2555 	push	bc
   0C29 D5            [11] 2556 	push	de
   0C2A 21 05 00      [10] 2557 	ld	hl, #5
   0C2D 39            [11] 2558 	add	hl, sp
   0C2E 5E            [ 7] 2559 	ld	e, (hl)
   0C2F 23            [ 6] 2560 	inc	hl
   0C30 56            [ 7] 2561 	ld	d, (hl)
   0C31                    2562 00101$:
   0C31 7A            [ 4] 2563 	ld	a, d
   0C32 B3            [ 4] 2564 	or	a, e
   0C33 C8            [11] 2565 	ret	Z
                           2566 ;./bios.c:54: *addr++ = b;
   0C34 21 04 00      [10] 2567 	ld	hl, #4+0
   0C37 39            [11] 2568 	add	hl, sp
   0C38 7E            [ 7] 2569 	ld	a, (hl)
   0C39 02            [ 7] 2570 	ld	(bc), a
   0C3A 03            [ 6] 2571 	inc	bc
                           2572 ;./bios.c:55: count--;
   0C3B 1B            [ 6] 2573 	dec	de
                           2574 ;./bios.c:57: }
   0C3C 18 F3         [12] 2575 	jr	00101$
                           2576 ;./bios.c:83: void bios_boot() __naked {
                           2577 ;	---------------------------------
                           2578 ; Function bios_boot
                           2579 ; ---------------------------------
   0C3E                    2580 _bios_boot::
                           2581 ;./bios.c:87: bint_timer = 0;
   0C3E 21 00 00      [10] 2582 	ld	hl, #0x0000
   0C41 22r0Er00      [16] 2583 	ld	(_bint_timer), hl
                           2584 ;./bios.c:97: bios_iobyte = 0;
   0C44 21 03 00      [10] 2585 	ld	hl,#_bios_iobyte + 0
   0C47 36 00         [10] 2586 	ld	(hl), #0x00
                           2587 ;./bios.c:100: bios_curdsk = 0;
   0C49 21 04 00      [10] 2588 	ld	hl,#_bios_curdsk + 0
   0C4C 36 00         [10] 2589 	ld	(hl), #0x00
                           2590 ;./bios.c:104: lcd_init();
   0C4E CDr40r07      [17] 2591 	call	_lcd_init
                           2592 ;./bios.c:105: sound_off();
   0C51 CDr20r0A      [17] 2593 	call	_vgl_sound_off
                           2594 ;./bios.c:113: puts(CPM_VERSION);
   0C54 21rA1r0C      [10] 2595 	ld	hl, #___str_16
   0C57 E5            [11] 2596 	push	hl
   0C58 CDr52r0B      [17] 2597 	call	_puts
   0C5B F1            [10] 2598 	pop	af
                           2599 ;./bios.c:115: sound_note(12*4, 250);
   0C5C 21 FA 00      [10] 2600 	ld	hl, #0x00fa
   0C5F E5            [11] 2601 	push	hl
   0C60 2E 30         [ 7] 2602 	ld	l, #0x30
   0C62 E5            [11] 2603 	push	hl
   0C63 CDr68r0A      [17] 2604 	call	_sound_note
   0C66 F1            [10] 2605 	pop	af
   0C67 F1            [10] 2606 	pop	af
                           2607 ;./bios.c:120: __endasm;
   0C68 C3r6Br0C      [10] 2608 	jp	_bios_wboot
                           2609 ;./bios.c:122: }
                           2610 ;./bios.c:125: void bios_wboot() __naked {
                           2611 ;	---------------------------------
                           2612 ; Function bios_wboot
                           2613 ; ---------------------------------
   0C6B                    2614 _bios_wboot::
                           2615 ;./bios.c:151: bios_curdsk = 0;
   0C6B 21 04 00      [10] 2616 	ld	hl,#_bios_curdsk + 0
   0C6E 36 00         [10] 2617 	ld	(hl), #0x00
                           2618 ;./bios.c:152: bios_dma = (byte *)0x0080;
   0C70 21 80 00      [10] 2619 	ld	hl, #0x0080
   0C73 22r07r00      [16] 2620 	ld	(_bios_dma), hl
                           2621 ;./bios.c:154: bios_memset(bios_dma, 0x1a, 0x80);	// Fill DMA area with EOFs
   0C76 2E 80         [ 7] 2622 	ld	l, #0x80
   0C78 E5            [11] 2623 	push	hl
   0C79 3E 1A         [ 7] 2624 	ld	a, #0x1a
   0C7B F5            [11] 2625 	push	af
   0C7C 33            [ 6] 2626 	inc	sp
   0C7D 2E 80         [ 7] 2627 	ld	l, #0x80
   0C7F E5            [11] 2628 	push	hl
   0C80 CDr26r0C      [17] 2629 	call	_bios_memset
   0C83 F1            [10] 2630 	pop	af
   0C84 F1            [10] 2631 	pop	af
   0C85 33            [ 6] 2632 	inc	sp
                           2633 ;./bios.c:157: bios_trk = 0;
   0C86 21 00 00      [10] 2634 	ld	hl, #0x0000
   0C89 22r09r00      [16] 2635 	ld	(_bios_trk), hl
                           2636 ;./bios.c:158: bios_sec = 1;
   0C8C 2E 01         [ 7] 2637 	ld	l, #0x01
   0C8E 22r0Br00      [16] 2638 	ld	(_bios_sec), hl
                           2639 ;./bios.c:170: __endasm;
   0C91 0E 00         [ 7] 2640 	ld	c, #0
   0C93 C3r00r00      [10] 2641 	jp	_bdos
                           2642 ;./bios.c:171: }
                           2643 ;./bios.c:174: byte bios_const() {
                           2644 ;	---------------------------------
                           2645 ; Function bios_const
                           2646 ; ---------------------------------
   0C96                    2647 _bios_const::
                           2648 ;./bios.c:179: if (keyboard_checkkey() > 0) return 0xff;	// Key pressed
   0C96 CDrEBr09      [17] 2649 	call	_keyboard_checkkey
   0C99 7D            [ 4] 2650 	ld	a, l
   0C9A B7            [ 4] 2651 	or	a, a
                           2652 ;./bios.c:180: return 0x00;	// No key pressed
   0C9B 2E FF         [ 7] 2653 	ld	l, #0xff
   0C9D C0            [11] 2654 	ret	NZ
   0C9E 2E 00         [ 7] 2655 	ld	l, #0x00
                           2656 ;./bios.c:181: }
   0CA0 C9            [10] 2657 	ret
   0CA1                    2658 ___str_16:
   0CA1 33 32 4B 20 56 47  2659 	.ascii "32K VGL CP/M 2.0.0"
        4C 20 43 50 2F 4D
        20 32 2E 30 2E 30
   0CB3 0A                 2660 	.db 0x0a
   0CB4 32 30 32 33 2D 30  2661 	.ascii "2023-08-15 by HotKey"
        38 2D 31 35 20 62
        79 20 48 6F 74 4B
        65 79
   0CC8 00                 2662 	.db 0x00
                           2663 ;./bios.c:183: byte bios_conin() {
                           2664 ;	---------------------------------
                           2665 ; Function bios_conin
                           2666 ; ---------------------------------
   0CC9                    2667 _bios_conin::
                           2668 ;./bios.c:187: return keyboard_getchar();
                           2669 ;./bios.c:188: }
   0CC9 C3r04r0A      [10] 2670 	jp	_keyboard_getchar
                           2671 ;./bios.c:190: void bios_conout(byte c) {
                           2672 ;	---------------------------------
                           2673 ; Function bios_conout
                           2674 ; ---------------------------------
   0CCC                    2675 _bios_conout::
                           2676 ;./bios.c:194: putchar(c);
   0CCC 21 02 00      [10] 2677 	ld	hl, #2+0
   0CCF 39            [11] 2678 	add	hl, sp
   0CD0 7E            [ 7] 2679 	ld	a, (hl)
   0CD1 F5            [11] 2680 	push	af
   0CD2 33            [ 6] 2681 	inc	sp
   0CD3 CDr28r08      [17] 2682 	call	_lcd_putchar
   0CD6 33            [ 6] 2683 	inc	sp
                           2684 ;./bios.c:195: }
   0CD7 C9            [10] 2685 	ret
                           2686 ;./bios.c:197: void bios_list(byte c) {
                           2687 ;	---------------------------------
                           2688 ; Function bios_list
                           2689 ; ---------------------------------
   0CD8                    2690 _bios_list::
                           2691 ;./bios.c:203: putchar(c);
   0CD8 21 02 00      [10] 2692 	ld	hl, #2+0
   0CDB 39            [11] 2693 	add	hl, sp
   0CDC 7E            [ 7] 2694 	ld	a, (hl)
   0CDD F5            [11] 2695 	push	af
   0CDE 33            [ 6] 2696 	inc	sp
   0CDF CDr28r08      [17] 2697 	call	_lcd_putchar
   0CE2 33            [ 6] 2698 	inc	sp
                           2699 ;./bios.c:204: }
   0CE3 C9            [10] 2700 	ret
                           2701 ;./bios.c:206: void bios_punch(byte c) {
                           2702 ;	---------------------------------
                           2703 ; Function bios_punch
                           2704 ; ---------------------------------
   0CE4                    2705 _bios_punch::
                           2706 ;./bios.c:212: putchar(c);
   0CE4 21 02 00      [10] 2707 	ld	hl, #2+0
   0CE7 39            [11] 2708 	add	hl, sp
   0CE8 7E            [ 7] 2709 	ld	a, (hl)
   0CE9 F5            [11] 2710 	push	af
   0CEA 33            [ 6] 2711 	inc	sp
   0CEB CDr28r08      [17] 2712 	call	_lcd_putchar
   0CEE 33            [ 6] 2713 	inc	sp
                           2714 ;./bios.c:213: }
   0CEF C9            [10] 2715 	ret
                           2716 ;./bios.c:215: byte bios_reader() {
                           2717 ;	---------------------------------
                           2718 ; Function bios_reader
                           2719 ; ---------------------------------
   0CF0                    2720 _bios_reader::
                           2721 ;./bios.c:221: return getchar();
                           2722 ;./bios.c:222: }
   0CF0 C3r04r0A      [10] 2723 	jp	_keyboard_getchar
                           2724 ;./bios.c:224: void bios_home() {
                           2725 ;	---------------------------------
                           2726 ; Function bios_home
                           2727 ; ---------------------------------
   0CF3                    2728 _bios_home::
                           2729 ;./bios.c:226: bios_trk = 0;
   0CF3 21 00 00      [10] 2730 	ld	hl, #0x0000
   0CF6 22r09r00      [16] 2731 	ld	(_bios_trk), hl
                           2732 ;./bios.c:227: bios_sec = 1;
   0CF9 2E 01         [ 7] 2733 	ld	l, #0x01
   0CFB 22r0Br00      [16] 2734 	ld	(_bios_sec), hl
                           2735 ;./bios.c:228: }
   0CFE C9            [10] 2736 	ret
                           2737 ;./bios.c:230: DPH *bios_seldsk(byte n) {
                           2738 ;	---------------------------------
                           2739 ; Function bios_seldsk
                           2740 ; ---------------------------------
   0CFF                    2741 _bios_seldsk::
                           2742 ;./bios.c:237: bios_curdsk = n;
   0CFF 21 02 00      [10] 2743 	ld	hl, #2+0
   0D02 39            [11] 2744 	add	hl, sp
   0D03 7E            [ 7] 2745 	ld	a, (hl)
   0D04 32 04 00      [13] 2746 	ld	(_bios_curdsk+0), a
                           2747 ;./bios.c:238: return &bios_dummy_dph;
   0D07 21r0Dr00      [10] 2748 	ld	hl, #_bios_dummy_dph
                           2749 ;./bios.c:239: }
   0D0A C9            [10] 2750 	ret
                           2751 ;./bios.c:241: void bios_settrk(word t) {
                           2752 ;	---------------------------------
                           2753 ; Function bios_settrk
                           2754 ; ---------------------------------
   0D0B                    2755 _bios_settrk::
                           2756 ;./bios.c:243: bios_trk = t;
   0D0B FD 21 02 00   [14] 2757 	ld	iy, #2
   0D0F FD 39         [15] 2758 	add	iy, sp
   0D11 FD 7E 00      [19] 2759 	ld	a, 0 (iy)
   0D14 32r09r00      [13] 2760 	ld	(_bios_trk+0), a
   0D17 FD 7E 01      [19] 2761 	ld	a, 1 (iy)
   0D1A 32r0Ar00      [13] 2762 	ld	(_bios_trk+1), a
                           2763 ;./bios.c:244: }
   0D1D C9            [10] 2764 	ret
                           2765 ;./bios.c:246: void bios_setsec(word s) {
                           2766 ;	---------------------------------
                           2767 ; Function bios_setsec
                           2768 ; ---------------------------------
   0D1E                    2769 _bios_setsec::
                           2770 ;./bios.c:248: bios_sec = s;
   0D1E FD 21 02 00   [14] 2771 	ld	iy, #2
   0D22 FD 39         [15] 2772 	add	iy, sp
   0D24 FD 7E 00      [19] 2773 	ld	a, 0 (iy)
   0D27 32r0Br00      [13] 2774 	ld	(_bios_sec+0), a
   0D2A FD 7E 01      [19] 2775 	ld	a, 1 (iy)
   0D2D 32r0Cr00      [13] 2776 	ld	(_bios_sec+1), a
                           2777 ;./bios.c:249: }
   0D30 C9            [10] 2778 	ret
                           2779 ;./bios.c:251: void bios_setdma(byte *a) {
                           2780 ;	---------------------------------
                           2781 ; Function bios_setdma
                           2782 ; ---------------------------------
   0D31                    2783 _bios_setdma::
                           2784 ;./bios.c:253: bios_dma = a;
   0D31 FD 21 02 00   [14] 2785 	ld	iy, #2
   0D35 FD 39         [15] 2786 	add	iy, sp
   0D37 FD 7E 00      [19] 2787 	ld	a, 0 (iy)
   0D3A 32r07r00      [13] 2788 	ld	(_bios_dma+0), a
   0D3D FD 7E 01      [19] 2789 	ld	a, 1 (iy)
   0D40 32r08r00      [13] 2790 	ld	(_bios_dma+1), a
                           2791 ;./bios.c:254: }
   0D43 C9            [10] 2792 	ret
                           2793 ;./bios.c:256: byte bios_read() {
                           2794 ;	---------------------------------
                           2795 ; Function bios_read
                           2796 ; ---------------------------------
   0D44                    2797 _bios_read::
                           2798 ;./bios.c:259: return 0;
   0D44 2E 00         [ 7] 2799 	ld	l, #0x00
                           2800 ;./bios.c:260: }
   0D46 C9            [10] 2801 	ret
                           2802 ;./bios.c:262: byte bios_write(byte c) {
                           2803 ;	---------------------------------
                           2804 ; Function bios_write
                           2805 ; ---------------------------------
   0D47                    2806 _bios_write::
                           2807 ;./bios.c:267: return 0;
   0D47 2E 00         [ 7] 2808 	ld	l, #0x00
                           2809 ;./bios.c:268: }
   0D49 C9            [10] 2810 	ret
                           2811 ;./bios.c:270: byte bios_listst() {
                           2812 ;	---------------------------------
                           2813 ; Function bios_listst
                           2814 ; ---------------------------------
   0D4A                    2815 _bios_listst::
                           2816 ;./bios.c:272: return 0xff;
   0D4A 2E FF         [ 7] 2817 	ld	l, #0xff
                           2818 ;./bios.c:273: }
   0D4C C9            [10] 2819 	ret
                           2820 ;./bios.c:275: word bios_sectran(word n, byte *a) {
                           2821 ;	---------------------------------
                           2822 ; Function bios_sectran
                           2823 ; ---------------------------------
   0D4D                    2824 _bios_sectran::
                           2825 ;./bios.c:280: return n;
   0D4D C1            [10] 2826 	pop	bc
   0D4E E1            [10] 2827 	pop	hl
   0D4F E5            [11] 2828 	push	hl
   0D50 C5            [11] 2829 	push	bc
                           2830 ;./bios.c:281: }
   0D51 C9            [10] 2831 	ret
                           2832 ;./bios.c:284: void bios() __naked {
                           2833 ;	---------------------------------
                           2834 ; Function bios
                           2835 ; ---------------------------------
   0D52                    2836 _bios::
                           2837 ;./bios.c:309: __endasm;
   0D52 C3r3Er0C      [10] 2838 	jp	_bios_boot
   0D55 C3r6Br0C      [10] 2839 	jp	_bios_wboot
   0D58 C3r96r0C      [10] 2840 	jp	_bios_const
   0D5B C3rC9r0C      [10] 2841 	jp	_bios_conin
   0D5E C3rCCr0C      [10] 2842 	jp	_bios_conout
   0D61 C3rD8r0C      [10] 2843 	jp	_bios_list
   0D64 C3rE4r0C      [10] 2844 	jp	_bios_punch
   0D67 C3rF0r0C      [10] 2845 	jp	_bios_reader
   0D6A C3rF3r0C      [10] 2846 	jp	_bios_home
   0D6D C3rFFr0C      [10] 2847 	jp	_bios_seldsk
   0D70 C3r0Br0D      [10] 2848 	jp	_bios_settrk
   0D73 C3r1Er0D      [10] 2849 	jp	_bios_setsec
   0D76 C3r31r0D      [10] 2850 	jp	_bios_setdma
   0D79 C3r44r0D      [10] 2851 	jp	_bios_read
   0D7C C3r47r0D      [10] 2852 	jp	_bios_write
                           2853 ;	CP/M 2
   0D7F C3r4Ar0D      [10] 2854 	jp	_bios_listst
   0D82 C3r4Dr0D      [10] 2855 	jp	_bios_sectran
                           2856 ;CP/M	3:
                           2857 ;./bios.c:310: }
                           2858 ;./bint.c:11: void bint() __naked {
                           2859 ;	---------------------------------
                           2860 ; Function bint
                           2861 ; ---------------------------------
   0D85                    2862 _bint::
                           2863 ;./bint.c:21: __endasm;
                           2864 ;.asciz	'[BINT]' ; Marker to find segment in binary
   0D85 F5            [11] 2865 	push	af
   0D86 C5            [11] 2866 	push	bc
   0D87 D5            [11] 2867 	push	de
   0D88 E5            [11] 2868 	push	hl
   0D89 DD E5         [15] 2869 	push	ix
   0D8B FD E5         [15] 2870 	push	iy
                           2871 ;./bint.c:25: bint_timer ++;
   0D8D ED 4Br0Er00   [20] 2872 	ld	bc, (_bint_timer)
   0D91 03            [ 6] 2873 	inc	bc
   0D92 ED 43r0Er00   [20] 2874 	ld	(_bint_timer), bc
                           2875 ;./bint.c:63: __endasm;
   0D96 FD E1         [14] 2876 	pop	iy
   0D98 DD E1         [14] 2877 	pop	ix
   0D9A E1            [10] 2878 	pop	hl
   0D9B D1            [10] 2879 	pop	de
   0D9C C1            [10] 2880 	pop	bc
   0D9D F1            [10] 2881 	pop	af
                           2882 ;./bint.c:71: __endasm;
   0D9E FB            [ 4] 2883 	ei
   0D9F ED 4D         [14] 2884 	reti
                           2885 ;.asciz	'[BINT end]'
                           2886 ;./bint.c:72: }
                           2887 ;./cpm.c:22: void main() __naked {
                           2888 ;	---------------------------------
                           2889 ; Function main
                           2890 ; ---------------------------------
   0DA1                    2891 _main::
                           2892 ;./cpm.c:26: __endasm;
   0DA1 C3r3Er0C      [10] 2893 	jp	_bios_boot
                           2894 ;./cpm.c:27: }
                           2895 	.area _CODE
                           2896 	.area _INITIALIZER
   0000                    2897 __xinit__lcd_x:
   0000 00                 2898 	.db #0x00	; 0
   0001                    2899 __xinit__lcd_y:
   0001 00                 2900 	.db #0x00	; 0
   0002                    2901 __xinit__lcd_cursor:
   0002 01                 2902 	.db #0x01	; 1
   0003                    2903 __xinit__keyboard_getchar_last:
   0003 00                 2904 	.db #0x00	; 0
                           2905 	.area _CABS (ABS)
