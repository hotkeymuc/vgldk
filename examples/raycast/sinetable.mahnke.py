import math
# For MAHNKE raycaster
#cols = 20
#angf = cols*4
#angf = 128
angf = 256
#grid = 64
#OVER = 1


# Sine table
SINTABLE_INDEX_TYPE = 'unsigned char'
#SINTABLE_INDEX_TYPE = 'unsigned int'
SINTABLE_SIZE = angf

SINTABLE_VALUE_TYPE = 'signed char'
SINTABLE_OVER = 127
#SINTABLE_VALUE_TYPE = 'signed int'
#SINTABLE_OVER = (32768 // (grid*OVER))-1
#SINTABLE_OVER = (16384 // (grid*OVER))-1

# Generate values
table = []
for i in range(SINTABLE_SIZE):
	a = i*(2.0*math.pi)/(SINTABLE_SIZE)
	v = math.sin(a) * SINTABLE_OVER
	vi = int(round(v))
	table.append(vi)

# Output as .h
r = '\n'
#r = 'const byte cols = %d;\n' % cols
#r += 'const byte angf = %d;\n' % angf
r += '\n'
r += '// Auto-generated by %s\n' % __file__
#r += '#define OVER %d	// Oversample coordinates\n' % OVER
r += '#define SINTABLE_INDEX_TYPE %s\n' % SINTABLE_INDEX_TYPE
r += '#define SINTABLE_SIZE %d\n' % SINTABLE_SIZE
r += '#define SINTABLE_VALUE_TYPE %s\n' % SINTABLE_VALUE_TYPE
r += '#define SINTABLE_OVER %d\n' % SINTABLE_OVER
r += 'const %s SINTABLE[%d] = {' % ('SINTABLE_VALUE_TYPE', SINTABLE_SIZE)
OUTPUT_COLS = 32
for i,v in enumerate(table):
	if (i > 0): r += ','
	if (i % OUTPUT_COLS == 0): r += '\n\t'
	else: r += ' '
	r += '% 4d' % v
r += '\n};\n'
r += '// end of auto-generated sine table\n'
r += '\n'
print(r)